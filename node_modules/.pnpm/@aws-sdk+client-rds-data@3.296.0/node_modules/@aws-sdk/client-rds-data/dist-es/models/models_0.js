import { RDSDataServiceException as __BaseException } from "./RDSDataServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export class BadRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
    }
}
export var TypeHint;
(function (TypeHint) {
    TypeHint["DATE"] = "DATE";
    TypeHint["DECIMAL"] = "DECIMAL";
    TypeHint["JSON"] = "JSON";
    TypeHint["TIME"] = "TIME";
    TypeHint["TIMESTAMP"] = "TIMESTAMP";
    TypeHint["UUID"] = "UUID";
})(TypeHint || (TypeHint = {}));
export class ForbiddenException extends __BaseException {
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        this.name = "ForbiddenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ForbiddenException.prototype);
    }
}
export class InternalServerErrorException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerErrorException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerErrorException.prototype);
    }
}
export class ServiceUnavailableError extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableError",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableError";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableError.prototype);
    }
}
export class StatementTimeoutException extends __BaseException {
    constructor(opts) {
        super({
            name: "StatementTimeoutException",
            $fault: "client",
            ...opts,
        });
        this.name = "StatementTimeoutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, StatementTimeoutException.prototype);
        this.dbConnectionId = opts.dbConnectionId;
    }
}
export class NotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
    }
}
export var DecimalReturnType;
(function (DecimalReturnType) {
    DecimalReturnType["DOUBLE_OR_LONG"] = "DOUBLE_OR_LONG";
    DecimalReturnType["STRING"] = "STRING";
})(DecimalReturnType || (DecimalReturnType = {}));
export var RecordsFormatType;
(function (RecordsFormatType) {
    RecordsFormatType["JSON"] = "JSON";
    RecordsFormatType["NONE"] = "NONE";
})(RecordsFormatType || (RecordsFormatType = {}));
export var LongReturnType;
(function (LongReturnType) {
    LongReturnType["LONG"] = "LONG";
    LongReturnType["STRING"] = "STRING";
})(LongReturnType || (LongReturnType = {}));
export var ArrayValue;
(function (ArrayValue) {
    ArrayValue.visit = (value, visitor) => {
        if (value.booleanValues !== undefined)
            return visitor.booleanValues(value.booleanValues);
        if (value.longValues !== undefined)
            return visitor.longValues(value.longValues);
        if (value.doubleValues !== undefined)
            return visitor.doubleValues(value.doubleValues);
        if (value.stringValues !== undefined)
            return visitor.stringValues(value.stringValues);
        if (value.arrayValues !== undefined)
            return visitor.arrayValues(value.arrayValues);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ArrayValue || (ArrayValue = {}));
export var Field;
(function (Field) {
    Field.visit = (value, visitor) => {
        if (value.isNull !== undefined)
            return visitor.isNull(value.isNull);
        if (value.booleanValue !== undefined)
            return visitor.booleanValue(value.booleanValue);
        if (value.longValue !== undefined)
            return visitor.longValue(value.longValue);
        if (value.doubleValue !== undefined)
            return visitor.doubleValue(value.doubleValue);
        if (value.stringValue !== undefined)
            return visitor.stringValue(value.stringValue);
        if (value.blobValue !== undefined)
            return visitor.blobValue(value.blobValue);
        if (value.arrayValue !== undefined)
            return visitor.arrayValue(value.arrayValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Field || (Field = {}));
export var Value;
(function (Value) {
    Value.visit = (value, visitor) => {
        if (value.isNull !== undefined)
            return visitor.isNull(value.isNull);
        if (value.bitValue !== undefined)
            return visitor.bitValue(value.bitValue);
        if (value.bigIntValue !== undefined)
            return visitor.bigIntValue(value.bigIntValue);
        if (value.intValue !== undefined)
            return visitor.intValue(value.intValue);
        if (value.doubleValue !== undefined)
            return visitor.doubleValue(value.doubleValue);
        if (value.realValue !== undefined)
            return visitor.realValue(value.realValue);
        if (value.stringValue !== undefined)
            return visitor.stringValue(value.stringValue);
        if (value.blobValue !== undefined)
            return visitor.blobValue(value.blobValue);
        if (value.arrayValues !== undefined)
            return visitor.arrayValues(value.arrayValues);
        if (value.structValue !== undefined)
            return visitor.structValue(value.structValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Value || (Value = {}));
export const BeginTransactionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BeginTransactionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ColumnMetadataFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CommitTransactionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CommitTransactionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ExecuteSqlRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ResultSetMetadataFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ResultSetOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RollbackTransactionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RollbackTransactionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ArrayValueFilterSensitiveLog = (obj) => {
    if (obj.booleanValues !== undefined)
        return { booleanValues: obj.booleanValues };
    if (obj.longValues !== undefined)
        return { longValues: obj.longValues };
    if (obj.doubleValues !== undefined)
        return { doubleValues: obj.doubleValues };
    if (obj.stringValues !== undefined)
        return { stringValues: obj.stringValues };
    if (obj.arrayValues !== undefined)
        return { arrayValues: obj.arrayValues.map((item) => ArrayValueFilterSensitiveLog(item)) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const FieldFilterSensitiveLog = (obj) => {
    if (obj.isNull !== undefined)
        return { isNull: obj.isNull };
    if (obj.booleanValue !== undefined)
        return { booleanValue: obj.booleanValue };
    if (obj.longValue !== undefined)
        return { longValue: obj.longValue };
    if (obj.doubleValue !== undefined)
        return { doubleValue: obj.doubleValue };
    if (obj.stringValue !== undefined)
        return { stringValue: obj.stringValue };
    if (obj.blobValue !== undefined)
        return { blobValue: obj.blobValue };
    if (obj.arrayValue !== undefined)
        return { arrayValue: ArrayValueFilterSensitiveLog(obj.arrayValue) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const SqlParameterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.value && { value: FieldFilterSensitiveLog(obj.value) }),
});
export const UpdateResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.generatedFields && { generatedFields: obj.generatedFields.map((item) => FieldFilterSensitiveLog(item)) }),
});
export const ValueFilterSensitiveLog = (obj) => {
    if (obj.isNull !== undefined)
        return { isNull: obj.isNull };
    if (obj.bitValue !== undefined)
        return { bitValue: obj.bitValue };
    if (obj.bigIntValue !== undefined)
        return { bigIntValue: obj.bigIntValue };
    if (obj.intValue !== undefined)
        return { intValue: obj.intValue };
    if (obj.doubleValue !== undefined)
        return { doubleValue: obj.doubleValue };
    if (obj.realValue !== undefined)
        return { realValue: obj.realValue };
    if (obj.stringValue !== undefined)
        return { stringValue: obj.stringValue };
    if (obj.blobValue !== undefined)
        return { blobValue: obj.blobValue };
    if (obj.arrayValues !== undefined)
        return { arrayValues: obj.arrayValues.map((item) => ValueFilterSensitiveLog(item)) };
    if (obj.structValue !== undefined)
        return { structValue: StructValueFilterSensitiveLog(obj.structValue) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const ExecuteStatementRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.parameters && { parameters: obj.parameters.map((item) => SqlParameterFilterSensitiveLog(item)) }),
});
export const StructValueFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.attributes && { attributes: obj.attributes.map((item) => ValueFilterSensitiveLog(item)) }),
});
export const BatchExecuteStatementRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.parameterSets && {
        parameterSets: obj.parameterSets.map((item) => item.map((item) => SqlParameterFilterSensitiveLog(item))),
    }),
});
export const BatchExecuteStatementResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.updateResults && { updateResults: obj.updateResults.map((item) => UpdateResultFilterSensitiveLog(item)) }),
});
export const _RecordFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.values && { values: obj.values.map((item) => ValueFilterSensitiveLog(item)) }),
});
export const ExecuteStatementResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.records && { records: obj.records.map((item) => item.map((item) => FieldFilterSensitiveLog(item))) }),
    ...(obj.generatedFields && { generatedFields: obj.generatedFields.map((item) => FieldFilterSensitiveLog(item)) }),
});
export const ResultFrameFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.records && { records: obj.records.map((item) => _RecordFilterSensitiveLog(item)) }),
});
export const SqlStatementResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ExecuteSqlResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
