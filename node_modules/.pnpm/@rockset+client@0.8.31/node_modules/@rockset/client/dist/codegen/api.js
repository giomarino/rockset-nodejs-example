"use strict";
// tslint:disable
/**
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspacesApi = exports.WorkspacesApiFactory = exports.WorkspacesApiFp = exports.WorkspacesApiFetchParamCreator = exports.VirtualInstancesApi = exports.VirtualInstancesApiFactory = exports.VirtualInstancesApiFp = exports.VirtualInstancesApiFetchParamCreator = exports.ViewsApi = exports.ViewsApiFactory = exports.ViewsApiFp = exports.ViewsApiFetchParamCreator = exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiFetchParamCreator = exports.SharedLambdasApi = exports.SharedLambdasApiFactory = exports.SharedLambdasApiFp = exports.SharedLambdasApiFetchParamCreator = exports.QueryLambdasApi = exports.QueryLambdasApiFactory = exports.QueryLambdasApiFp = exports.QueryLambdasApiFetchParamCreator = exports.QueriesApi = exports.QueriesApiFactory = exports.QueriesApiFp = exports.QueriesApiFetchParamCreator = exports.OrganizationsApi = exports.OrganizationsApiFactory = exports.OrganizationsApiFp = exports.OrganizationsApiFetchParamCreator = exports.IntegrationsApi = exports.IntegrationsApiFactory = exports.IntegrationsApiFp = exports.IntegrationsApiFetchParamCreator = exports.DocumentsApi = exports.DocumentsApiFactory = exports.DocumentsApiFp = exports.DocumentsApiFetchParamCreator = exports.CustomRolesApi = exports.CustomRolesApiFactory = exports.CustomRolesApiFp = exports.CustomRolesApiFetchParamCreator = exports.CollectionsApi = exports.CollectionsApiFactory = exports.CollectionsApiFp = exports.CollectionsApiFetchParamCreator = exports.AliasesApi = exports.AliasesApiFactory = exports.AliasesApiFp = exports.AliasesApiFetchParamCreator = exports.APIKeysApi = exports.APIKeysApiFactory = exports.APIKeysApiFp = exports.APIKeysApiFetchParamCreator = exports.VirtualInstance = exports.View = exports.UpdateVirtualInstanceRequest = exports.UpdateApiKeyRequest = exports.StatusSnowflake = exports.StatusMongoDb = exports.StatusKafka = exports.StatusDynamoDbV2 = exports.StatusDynamoDb = exports.StatusAzureEventHubs = exports.Status = exports.SourceKinesis = exports.SourceKafka = exports.SourceAzureEventHubs = exports.QueryLambdaVersion = exports.QueryInfo = exports.Privilege = exports.PatchOperation = exports.OutputField = exports.KafkaIntegration = exports.InputField = exports.FieldPartition = exports.ErrorModel = exports.DocumentStatus = exports.CsvParams = exports.CreateVirtualInstanceRequest = exports.CreateCollectionMountRequest = exports.CollectionMount = exports.Collection = exports.Cluster = exports.ApiKey = exports.Alias = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = void 0;
var url = require("url");
var fetchPonyfill = require("fetch-ponyfill")();
var BASE_PATH = "https://api.use1a1.rockset.com".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, fetch) {
        if (basePath === void 0) { basePath = BASE_PATH; }
        if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
/**
 * @export
 * @namespace Alias
 */
var Alias;
(function (Alias) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["CREATED"] = 'CREATED'] = "CREATED";
        StateEnum[StateEnum["DELETED"] = 'DELETED'] = "DELETED";
    })(StateEnum = Alias.StateEnum || (Alias.StateEnum = {}));
})(Alias = exports.Alias || (exports.Alias = {}));
/**
 * @export
 * @namespace ApiKey
 */
var ApiKey;
(function (ApiKey) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["ACTIVE"] = 'ACTIVE'] = "ACTIVE";
        StateEnum[StateEnum["SUSPENDED"] = 'SUSPENDED'] = "SUSPENDED";
    })(StateEnum = ApiKey.StateEnum || (ApiKey.StateEnum = {}));
})(ApiKey = exports.ApiKey || (exports.ApiKey = {}));
/**
 * @export
 * @namespace Cluster
 */
var Cluster;
(function (Cluster) {
    /**
     * @export
     * @enum {string}
     */
    var ClusterTypeEnum;
    (function (ClusterTypeEnum) {
        ClusterTypeEnum[ClusterTypeEnum["PUBLIC"] = 'PUBLIC'] = "PUBLIC";
    })(ClusterTypeEnum = Cluster.ClusterTypeEnum || (Cluster.ClusterTypeEnum = {}));
})(Cluster = exports.Cluster || (exports.Cluster = {}));
/**
 * @export
 * @namespace Collection
 */
var Collection;
(function (Collection) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["INITIALIZED"] = 'INITIALIZED'] = "INITIALIZED";
        StatusEnum[StatusEnum["CREATED"] = 'CREATED'] = "CREATED";
        StatusEnum[StatusEnum["READY"] = 'READY'] = "READY";
        StatusEnum[StatusEnum["PAUSED"] = 'PAUSED'] = "PAUSED";
        StatusEnum[StatusEnum["DELETED"] = 'DELETED'] = "DELETED";
        StatusEnum[StatusEnum["PAUSING"] = 'PAUSING'] = "PAUSING";
        StatusEnum[StatusEnum["RESUMING"] = 'RESUMING'] = "RESUMING";
        StatusEnum[StatusEnum["PREPARINGBULK"] = 'PREPARING_BULK'] = "PREPARINGBULK";
        StatusEnum[StatusEnum["BULKINGESTMODE"] = 'BULK_INGEST_MODE'] = "BULKINGESTMODE";
        StatusEnum[StatusEnum["EXITINGBULKINGESTMODE"] = 'EXITING_BULK_INGEST_MODE'] = "EXITINGBULKINGESTMODE";
        StatusEnum[StatusEnum["UNKNOWN"] = 'UNKNOWN'] = "UNKNOWN";
    })(StatusEnum = Collection.StatusEnum || (Collection.StatusEnum = {}));
})(Collection = exports.Collection || (exports.Collection = {}));
/**
 * @export
 * @namespace CollectionMount
 */
var CollectionMount;
(function (CollectionMount) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["STATIC"] = 'STATIC'] = "STATIC";
        TypeEnum[TypeEnum["LIVE"] = 'LIVE'] = "LIVE";
    })(TypeEnum = CollectionMount.TypeEnum || (CollectionMount.TypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["CREATING"] = 'CREATING'] = "CREATING";
        StateEnum[StateEnum["ACTIVE"] = 'ACTIVE'] = "ACTIVE";
        StateEnum[StateEnum["EXPIRED"] = 'EXPIRED'] = "EXPIRED";
        StateEnum[StateEnum["DELETING"] = 'DELETING'] = "DELETING";
    })(StateEnum = CollectionMount.StateEnum || (CollectionMount.StateEnum = {}));
})(CollectionMount = exports.CollectionMount || (exports.CollectionMount = {}));
/**
 * @export
 * @namespace CreateCollectionMountRequest
 */
var CreateCollectionMountRequest;
(function (CreateCollectionMountRequest) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["STATIC"] = 'STATIC'] = "STATIC";
        TypeEnum[TypeEnum["LIVE"] = 'LIVE'] = "LIVE";
    })(TypeEnum = CreateCollectionMountRequest.TypeEnum || (CreateCollectionMountRequest.TypeEnum = {}));
})(CreateCollectionMountRequest = exports.CreateCollectionMountRequest || (exports.CreateCollectionMountRequest = {}));
/**
 * @export
 * @namespace CreateVirtualInstanceRequest
 */
var CreateVirtualInstanceRequest;
(function (CreateVirtualInstanceRequest) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["FREE"] = 'FREE'] = "FREE";
        TypeEnum[TypeEnum["NANO"] = 'NANO'] = "NANO";
        TypeEnum[TypeEnum["SHARED"] = 'SHARED'] = "SHARED";
        TypeEnum[TypeEnum["MILLI"] = 'MILLI'] = "MILLI";
        TypeEnum[TypeEnum["SMALL"] = 'SMALL'] = "SMALL";
        TypeEnum[TypeEnum["MEDIUM"] = 'MEDIUM'] = "MEDIUM";
        TypeEnum[TypeEnum["LARGE"] = 'LARGE'] = "LARGE";
        TypeEnum[TypeEnum["XLARGE"] = 'XLARGE'] = "XLARGE";
        TypeEnum[TypeEnum["XLARGE2"] = 'XLARGE2'] = "XLARGE2";
        TypeEnum[TypeEnum["XLARGE4"] = 'XLARGE4'] = "XLARGE4";
        TypeEnum[TypeEnum["XLARGE8"] = 'XLARGE8'] = "XLARGE8";
        TypeEnum[TypeEnum["XLARGE16"] = 'XLARGE16'] = "XLARGE16";
    })(TypeEnum = CreateVirtualInstanceRequest.TypeEnum || (CreateVirtualInstanceRequest.TypeEnum = {}));
})(CreateVirtualInstanceRequest = exports.CreateVirtualInstanceRequest || (exports.CreateVirtualInstanceRequest = {}));
/**
 * @export
 * @namespace CsvParams
 */
var CsvParams;
(function (CsvParams) {
    /**
     * @export
     * @enum {string}
     */
    var ColumnTypesEnum;
    (function (ColumnTypesEnum) {
        ColumnTypesEnum[ColumnTypesEnum["UNKNOWN"] = 'UNKNOWN'] = "UNKNOWN";
        ColumnTypesEnum[ColumnTypesEnum["BOOLEAN"] = 'BOOLEAN'] = "BOOLEAN";
        ColumnTypesEnum[ColumnTypesEnum["BOOL"] = 'BOOL'] = "BOOL";
        ColumnTypesEnum[ColumnTypesEnum["INTEGER"] = 'INTEGER'] = "INTEGER";
        ColumnTypesEnum[ColumnTypesEnum["INT"] = 'INT'] = "INT";
        ColumnTypesEnum[ColumnTypesEnum["FLOAT"] = 'FLOAT'] = "FLOAT";
        ColumnTypesEnum[ColumnTypesEnum["TIME"] = 'TIME'] = "TIME";
        ColumnTypesEnum[ColumnTypesEnum["DATE"] = 'DATE'] = "DATE";
        ColumnTypesEnum[ColumnTypesEnum["DATETIME"] = 'DATETIME'] = "DATETIME";
        ColumnTypesEnum[ColumnTypesEnum["TIMESTAMP"] = 'TIMESTAMP'] = "TIMESTAMP";
        ColumnTypesEnum[ColumnTypesEnum["STRING"] = 'STRING'] = "STRING";
    })(ColumnTypesEnum = CsvParams.ColumnTypesEnum || (CsvParams.ColumnTypesEnum = {}));
})(CsvParams = exports.CsvParams || (exports.CsvParams = {}));
/**
 * @export
 * @namespace DocumentStatus
 */
var DocumentStatus;
(function (DocumentStatus) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["ADDED"] = 'ADDED'] = "ADDED";
        StatusEnum[StatusEnum["REPLACED"] = 'REPLACED'] = "REPLACED";
        StatusEnum[StatusEnum["DELETED"] = 'DELETED'] = "DELETED";
        StatusEnum[StatusEnum["PATCHED"] = 'PATCHED'] = "PATCHED";
        StatusEnum[StatusEnum["ERROR"] = 'ERROR'] = "ERROR";
    })(StatusEnum = DocumentStatus.StatusEnum || (DocumentStatus.StatusEnum = {}));
})(DocumentStatus = exports.DocumentStatus || (exports.DocumentStatus = {}));
/**
 * @export
 * @namespace ErrorModel
 */
var ErrorModel;
(function (ErrorModel) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["AUTHEXCEPTION"] = 'AUTHEXCEPTION'] = "AUTHEXCEPTION";
        TypeEnum[TypeEnum["VERSIONEXCEPTION"] = 'VERSIONEXCEPTION'] = "VERSIONEXCEPTION";
        TypeEnum[TypeEnum["INTERNALERROR"] = 'INTERNALERROR'] = "INTERNALERROR";
        TypeEnum[TypeEnum["INVALIDINPUT"] = 'INVALIDINPUT'] = "INVALIDINPUT";
        TypeEnum[TypeEnum["NOTIMPLEMENTEDYET"] = 'NOTIMPLEMENTEDYET'] = "NOTIMPLEMENTEDYET";
        TypeEnum[TypeEnum["RESOURCEEXCEEDED"] = 'RESOURCEEXCEEDED'] = "RESOURCEEXCEEDED";
        TypeEnum[TypeEnum["ALREADYEXISTS"] = 'ALREADYEXISTS'] = "ALREADYEXISTS";
        TypeEnum[TypeEnum["NOTALLOWED"] = 'NOTALLOWED'] = "NOTALLOWED";
        TypeEnum[TypeEnum["NOTACCEPTABLE"] = 'NOTACCEPTABLE'] = "NOTACCEPTABLE";
        TypeEnum[TypeEnum["NOTSUPPORTED"] = 'NOTSUPPORTED'] = "NOTSUPPORTED";
        TypeEnum[TypeEnum["NOTFOUND"] = 'NOTFOUND'] = "NOTFOUND";
        TypeEnum[TypeEnum["DEPENDENTRESOURCES"] = 'DEPENDENTRESOURCES'] = "DEPENDENTRESOURCES";
        TypeEnum[TypeEnum["QUERYERROR"] = 'QUERY_ERROR'] = "QUERYERROR";
        TypeEnum[TypeEnum["NOTREADY"] = 'NOT_READY'] = "NOTREADY";
        TypeEnum[TypeEnum["FORBIDDEN"] = 'FORBIDDEN'] = "FORBIDDEN";
        TypeEnum[TypeEnum["QUERYTIMEOUT"] = 'QUERY_TIMEOUT'] = "QUERYTIMEOUT";
        TypeEnum[TypeEnum["CONNECTIONERROR"] = 'CONNECTION_ERROR'] = "CONNECTIONERROR";
        TypeEnum[TypeEnum["CONTENTTOOLARGE"] = 'CONTENTTOOLARGE'] = "CONTENTTOOLARGE";
        TypeEnum[TypeEnum["CREATING"] = 'CREATING'] = "CREATING";
        TypeEnum[TypeEnum["BADREQUEST"] = 'BADREQUEST'] = "BADREQUEST";
        TypeEnum[TypeEnum["SERVICEUNAVAILABLE"] = 'SERVICEUNAVAILABLE'] = "SERVICEUNAVAILABLE";
        TypeEnum[TypeEnum["CONFLICT"] = 'CONFLICT'] = "CONFLICT";
        TypeEnum[TypeEnum["RATELIMITEXCEEDED"] = 'RATELIMITEXCEEDED'] = "RATELIMITEXCEEDED";
        TypeEnum[TypeEnum["QUERYCANCELLED"] = 'QUERY_CANCELLED'] = "QUERYCANCELLED";
        TypeEnum[TypeEnum["CLIENTCONNECTIONERROR"] = 'CLIENT_CONNECTION_ERROR'] = "CLIENTCONNECTIONERROR";
    })(TypeEnum = ErrorModel.TypeEnum || (ErrorModel.TypeEnum = {}));
})(ErrorModel = exports.ErrorModel || (exports.ErrorModel = {}));
/**
 * @export
 * @namespace FieldPartition
 */
var FieldPartition;
(function (FieldPartition) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["AUTO"] = 'AUTO'] = "AUTO";
    })(TypeEnum = FieldPartition.TypeEnum || (FieldPartition.TypeEnum = {}));
})(FieldPartition = exports.FieldPartition || (exports.FieldPartition = {}));
/**
 * @export
 * @namespace InputField
 */
var InputField;
(function (InputField) {
    /**
     * @export
     * @enum {string}
     */
    var IfMissingEnum;
    (function (IfMissingEnum) {
        IfMissingEnum[IfMissingEnum["SKIP"] = 'SKIP'] = "SKIP";
        IfMissingEnum[IfMissingEnum["PASS"] = 'PASS'] = "PASS";
    })(IfMissingEnum = InputField.IfMissingEnum || (InputField.IfMissingEnum = {}));
})(InputField = exports.InputField || (exports.InputField = {}));
/**
 * @export
 * @namespace KafkaIntegration
 */
var KafkaIntegration;
(function (KafkaIntegration) {
    /**
     * @export
     * @enum {string}
     */
    var KafkaDataFormatEnum;
    (function (KafkaDataFormatEnum) {
        KafkaDataFormatEnum[KafkaDataFormatEnum["JSON"] = 'JSON'] = "JSON";
        KafkaDataFormatEnum[KafkaDataFormatEnum["AVRO"] = 'AVRO'] = "AVRO";
    })(KafkaDataFormatEnum = KafkaIntegration.KafkaDataFormatEnum || (KafkaIntegration.KafkaDataFormatEnum = {}));
})(KafkaIntegration = exports.KafkaIntegration || (exports.KafkaIntegration = {}));
/**
 * @export
 * @namespace OutputField
 */
var OutputField;
(function (OutputField) {
    /**
     * @export
     * @enum {string}
     */
    var OnErrorEnum;
    (function (OnErrorEnum) {
        OnErrorEnum[OnErrorEnum["SKIP"] = 'SKIP'] = "SKIP";
        OnErrorEnum[OnErrorEnum["FAIL"] = 'FAIL'] = "FAIL";
    })(OnErrorEnum = OutputField.OnErrorEnum || (OutputField.OnErrorEnum = {}));
})(OutputField = exports.OutputField || (exports.OutputField = {}));
/**
 * @export
 * @namespace PatchOperation
 */
var PatchOperation;
(function (PatchOperation) {
    /**
     * @export
     * @enum {string}
     */
    var OpEnum;
    (function (OpEnum) {
        OpEnum[OpEnum["ADD"] = 'ADD'] = "ADD";
        OpEnum[OpEnum["REPLACE"] = 'REPLACE'] = "REPLACE";
        OpEnum[OpEnum["REMOVE"] = 'REMOVE'] = "REMOVE";
        OpEnum[OpEnum["COPY"] = 'COPY'] = "COPY";
        OpEnum[OpEnum["MOVE"] = 'MOVE'] = "MOVE";
        OpEnum[OpEnum["TEST"] = 'TEST'] = "TEST";
        OpEnum[OpEnum["INCREMENT"] = 'INCREMENT'] = "INCREMENT";
    })(OpEnum = PatchOperation.OpEnum || (PatchOperation.OpEnum = {}));
})(PatchOperation = exports.PatchOperation || (exports.PatchOperation = {}));
/**
 * @export
 * @namespace Privilege
 */
var Privilege;
(function (Privilege) {
    /**
     * @export
     * @enum {string}
     */
    var ActionEnum;
    (function (ActionEnum) {
        ActionEnum[ActionEnum["ALLGLOBALACTIONS"] = 'ALL_GLOBAL_ACTIONS'] = "ALLGLOBALACTIONS";
        ActionEnum[ActionEnum["GETORGGLOBAL"] = 'GET_ORG_GLOBAL'] = "GETORGGLOBAL";
        ActionEnum[ActionEnum["GETCURRENTUSERGLOBAL"] = 'GET_CURRENT_USER_GLOBAL'] = "GETCURRENTUSERGLOBAL";
        ActionEnum[ActionEnum["INVITEUSERGLOBAL"] = 'INVITE_USER_GLOBAL'] = "INVITEUSERGLOBAL";
        ActionEnum[ActionEnum["DELETEUSERGLOBAL"] = 'DELETE_USER_GLOBAL'] = "DELETEUSERGLOBAL";
        ActionEnum[ActionEnum["LISTUSERSGLOBAL"] = 'LIST_USERS_GLOBAL'] = "LISTUSERSGLOBAL";
        ActionEnum[ActionEnum["GETBILLINGGLOBAL"] = 'GET_BILLING_GLOBAL'] = "GETBILLINGGLOBAL";
        ActionEnum[ActionEnum["UPDATEBILLINGGLOBAL"] = 'UPDATE_BILLING_GLOBAL'] = "UPDATEBILLINGGLOBAL";
        ActionEnum[ActionEnum["UPDATESETTINGSGLOBAL"] = 'UPDATE_SETTINGS_GLOBAL'] = "UPDATESETTINGSGLOBAL";
        ActionEnum[ActionEnum["GETMETRICSGLOBAL"] = 'GET_METRICS_GLOBAL'] = "GETMETRICSGLOBAL";
        ActionEnum[ActionEnum["CREATEVIGLOBAL"] = 'CREATE_VI_GLOBAL'] = "CREATEVIGLOBAL";
        ActionEnum[ActionEnum["UPDATEVIGLOBAL"] = 'UPDATE_VI_GLOBAL'] = "UPDATEVIGLOBAL";
        ActionEnum[ActionEnum["LISTVIGLOBAL"] = 'LIST_VI_GLOBAL'] = "LISTVIGLOBAL";
        ActionEnum[ActionEnum["CREATEWSGLOBAL"] = 'CREATE_WS_GLOBAL'] = "CREATEWSGLOBAL";
        ActionEnum[ActionEnum["LISTWSGLOBAL"] = 'LIST_WS_GLOBAL'] = "LISTWSGLOBAL";
        ActionEnum[ActionEnum["CREATEINTEGRATIONGLOBAL"] = 'CREATE_INTEGRATION_GLOBAL'] = "CREATEINTEGRATIONGLOBAL";
        ActionEnum[ActionEnum["DELETEINTEGRATIONGLOBAL"] = 'DELETE_INTEGRATION_GLOBAL'] = "DELETEINTEGRATIONGLOBAL";
        ActionEnum[ActionEnum["LISTINTEGRATIONSGLOBAL"] = 'LIST_INTEGRATIONS_GLOBAL'] = "LISTINTEGRATIONSGLOBAL";
        ActionEnum[ActionEnum["UPDATERESOURCEOWNERGLOBAL"] = 'UPDATE_RESOURCE_OWNER_GLOBAL'] = "UPDATERESOURCEOWNERGLOBAL";
        ActionEnum[ActionEnum["CREATEAPIKEYGLOBAL"] = 'CREATE_API_KEY_GLOBAL'] = "CREATEAPIKEYGLOBAL";
        ActionEnum[ActionEnum["CREATEROLEGLOBAL"] = 'CREATE_ROLE_GLOBAL'] = "CREATEROLEGLOBAL";
        ActionEnum[ActionEnum["UPDATEROLEGLOBAL"] = 'UPDATE_ROLE_GLOBAL'] = "UPDATEROLEGLOBAL";
        ActionEnum[ActionEnum["DELETEROLEGLOBAL"] = 'DELETE_ROLE_GLOBAL'] = "DELETEROLEGLOBAL";
        ActionEnum[ActionEnum["LISTROLESGLOBAL"] = 'LIST_ROLES_GLOBAL'] = "LISTROLESGLOBAL";
        ActionEnum[ActionEnum["GRANTREVOKEROLEGLOBAL"] = 'GRANT_REVOKE_ROLE_GLOBAL'] = "GRANTREVOKEROLEGLOBAL";
        ActionEnum[ActionEnum["ALLINTEGRATIONACTIONS"] = 'ALL_INTEGRATION_ACTIONS'] = "ALLINTEGRATIONACTIONS";
        ActionEnum[ActionEnum["CREATECOLLECTIONINTEGRATION"] = 'CREATE_COLLECTION_INTEGRATION'] = "CREATECOLLECTIONINTEGRATION";
        ActionEnum[ActionEnum["ALLWORKSPACEACTIONS"] = 'ALL_WORKSPACE_ACTIONS'] = "ALLWORKSPACEACTIONS";
        ActionEnum[ActionEnum["DELETEWS"] = 'DELETE_WS'] = "DELETEWS";
        ActionEnum[ActionEnum["QUERYDATAWS"] = 'QUERY_DATA_WS'] = "QUERYDATAWS";
        ActionEnum[ActionEnum["WRITEDATAWS"] = 'WRITE_DATA_WS'] = "WRITEDATAWS";
        ActionEnum[ActionEnum["CREATECOLLECTIONWS"] = 'CREATE_COLLECTION_WS'] = "CREATECOLLECTIONWS";
        ActionEnum[ActionEnum["DELETECOLLECTIONWS"] = 'DELETE_COLLECTION_WS'] = "DELETECOLLECTIONWS";
        ActionEnum[ActionEnum["CREATEALIASWS"] = 'CREATE_ALIAS_WS'] = "CREATEALIASWS";
        ActionEnum[ActionEnum["DELETEALIASWS"] = 'DELETE_ALIAS_WS'] = "DELETEALIASWS";
        ActionEnum[ActionEnum["LISTRESOURCESWS"] = 'LIST_RESOURCES_WS'] = "LISTRESOURCESWS";
        ActionEnum[ActionEnum["CREATEQUERYLAMBDAWS"] = 'CREATE_QUERY_LAMBDA_WS'] = "CREATEQUERYLAMBDAWS";
        ActionEnum[ActionEnum["DELETEQUERYLAMBDAWS"] = 'DELETE_QUERY_LAMBDA_WS'] = "DELETEQUERYLAMBDAWS";
        ActionEnum[ActionEnum["EXECUTEQUERYLAMBDAWS"] = 'EXECUTE_QUERY_LAMBDA_WS'] = "EXECUTEQUERYLAMBDAWS";
        ActionEnum[ActionEnum["CREATEVIEWWS"] = 'CREATE_VIEW_WS'] = "CREATEVIEWWS";
        ActionEnum[ActionEnum["DELETEVIEWWS"] = 'DELETE_VIEW_WS'] = "DELETEVIEWWS";
        ActionEnum[ActionEnum["ALLVIACTIONS"] = 'ALL_VI_ACTIONS'] = "ALLVIACTIONS";
        ActionEnum[ActionEnum["QUERYVI"] = 'QUERY_VI'] = "QUERYVI";
        ActionEnum[ActionEnum["UPDATEVI"] = 'UPDATE_VI'] = "UPDATEVI";
        ActionEnum[ActionEnum["SUSPENDRESUMEVI"] = 'SUSPEND_RESUME_VI'] = "SUSPENDRESUMEVI";
        ActionEnum[ActionEnum["DELETEVI"] = 'DELETE_VI'] = "DELETEVI";
    })(ActionEnum = Privilege.ActionEnum || (Privilege.ActionEnum = {}));
})(Privilege = exports.Privilege || (exports.Privilege = {}));
/**
 * @export
 * @namespace QueryInfo
 */
var QueryInfo;
(function (QueryInfo) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["QUEUED"] = 'QUEUED'] = "QUEUED";
        StatusEnum[StatusEnum["RUNNING"] = 'RUNNING'] = "RUNNING";
        StatusEnum[StatusEnum["COMPLETED"] = 'COMPLETED'] = "COMPLETED";
        StatusEnum[StatusEnum["ERROR"] = 'ERROR'] = "ERROR";
        StatusEnum[StatusEnum["CANCELLED"] = 'CANCELLED'] = "CANCELLED";
    })(StatusEnum = QueryInfo.StatusEnum || (QueryInfo.StatusEnum = {}));
})(QueryInfo = exports.QueryInfo || (exports.QueryInfo = {}));
/**
 * @export
 * @namespace QueryLambdaVersion
 */
var QueryLambdaVersion;
(function (QueryLambdaVersion) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["ACTIVE"] = 'ACTIVE'] = "ACTIVE";
        StateEnum[StateEnum["INVALIDSQL"] = 'INVALID_SQL'] = "INVALIDSQL";
    })(StateEnum = QueryLambdaVersion.StateEnum || (QueryLambdaVersion.StateEnum = {}));
})(QueryLambdaVersion = exports.QueryLambdaVersion || (exports.QueryLambdaVersion = {}));
/**
 * @export
 * @namespace SourceAzureEventHubs
 */
var SourceAzureEventHubs;
(function (SourceAzureEventHubs) {
    /**
     * @export
     * @enum {string}
     */
    var OffsetResetPolicyEnum;
    (function (OffsetResetPolicyEnum) {
        OffsetResetPolicyEnum[OffsetResetPolicyEnum["LATEST"] = 'LATEST'] = "LATEST";
        OffsetResetPolicyEnum[OffsetResetPolicyEnum["EARLIEST"] = 'EARLIEST'] = "EARLIEST";
    })(OffsetResetPolicyEnum = SourceAzureEventHubs.OffsetResetPolicyEnum || (SourceAzureEventHubs.OffsetResetPolicyEnum = {}));
})(SourceAzureEventHubs = exports.SourceAzureEventHubs || (exports.SourceAzureEventHubs = {}));
/**
 * @export
 * @namespace SourceKafka
 */
var SourceKafka;
(function (SourceKafka) {
    /**
     * @export
     * @enum {string}
     */
    var OffsetResetPolicyEnum;
    (function (OffsetResetPolicyEnum) {
        OffsetResetPolicyEnum[OffsetResetPolicyEnum["LATEST"] = 'LATEST'] = "LATEST";
        OffsetResetPolicyEnum[OffsetResetPolicyEnum["EARLIEST"] = 'EARLIEST'] = "EARLIEST";
    })(OffsetResetPolicyEnum = SourceKafka.OffsetResetPolicyEnum || (SourceKafka.OffsetResetPolicyEnum = {}));
})(SourceKafka = exports.SourceKafka || (exports.SourceKafka = {}));
/**
 * @export
 * @namespace SourceKinesis
 */
var SourceKinesis;
(function (SourceKinesis) {
    /**
     * @export
     * @enum {string}
     */
    var OffsetResetPolicyEnum;
    (function (OffsetResetPolicyEnum) {
        OffsetResetPolicyEnum[OffsetResetPolicyEnum["LATEST"] = 'LATEST'] = "LATEST";
        OffsetResetPolicyEnum[OffsetResetPolicyEnum["EARLIEST"] = 'EARLIEST'] = "EARLIEST";
    })(OffsetResetPolicyEnum = SourceKinesis.OffsetResetPolicyEnum || (SourceKinesis.OffsetResetPolicyEnum = {}));
})(SourceKinesis = exports.SourceKinesis || (exports.SourceKinesis = {}));
/**
 * @export
 * @namespace Status
 */
var Status;
(function (Status) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["INITIALIZING"] = 'INITIALIZING'] = "INITIALIZING";
        StateEnum[StateEnum["WATCHING"] = 'WATCHING'] = "WATCHING";
        StateEnum[StateEnum["PROCESSING"] = 'PROCESSING'] = "PROCESSING";
        StateEnum[StateEnum["COMPLETED"] = 'COMPLETED'] = "COMPLETED";
        StateEnum[StateEnum["ERROR"] = 'ERROR'] = "ERROR";
    })(StateEnum = Status.StateEnum || (Status.StateEnum = {}));
})(Status = exports.Status || (exports.Status = {}));
/**
 * @export
 * @namespace StatusAzureEventHubs
 */
var StatusAzureEventHubs;
(function (StatusAzureEventHubs) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["NODOCSYET"] = 'NO_DOCS_YET'] = "NODOCSYET";
        StateEnum[StateEnum["ACTIVE"] = 'ACTIVE'] = "ACTIVE";
        StateEnum[StateEnum["DORMANT"] = 'DORMANT'] = "DORMANT";
    })(StateEnum = StatusAzureEventHubs.StateEnum || (StatusAzureEventHubs.StateEnum = {}));
})(StatusAzureEventHubs = exports.StatusAzureEventHubs || (exports.StatusAzureEventHubs = {}));
/**
 * @export
 * @namespace StatusDynamoDb
 */
var StatusDynamoDb;
(function (StatusDynamoDb) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["INITIALIZING"] = 'INITIALIZING'] = "INITIALIZING";
        StateEnum[StateEnum["SCANNINGTABLE"] = 'SCANNING_TABLE'] = "SCANNINGTABLE";
        StateEnum[StateEnum["PROCESSINGSTREAM"] = 'PROCESSING_STREAM'] = "PROCESSINGSTREAM";
    })(StateEnum = StatusDynamoDb.StateEnum || (StatusDynamoDb.StateEnum = {}));
})(StatusDynamoDb = exports.StatusDynamoDb || (exports.StatusDynamoDb = {}));
/**
 * @export
 * @namespace StatusDynamoDbV2
 */
var StatusDynamoDbV2;
(function (StatusDynamoDbV2) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["INITIALIZING"] = 'INITIALIZING'] = "INITIALIZING";
        StateEnum[StateEnum["SCANNING"] = 'SCANNING'] = "SCANNING";
        StateEnum[StateEnum["EXPORTINGTOS3"] = 'EXPORTING_TO_S3'] = "EXPORTINGTOS3";
        StateEnum[StateEnum["DOWNLOADINGFROMS3"] = 'DOWNLOADING_FROM_S3'] = "DOWNLOADINGFROMS3";
        StateEnum[StateEnum["PROCESSINGSTREAM"] = 'PROCESSING_STREAM'] = "PROCESSINGSTREAM";
    })(StateEnum = StatusDynamoDbV2.StateEnum || (StatusDynamoDbV2.StateEnum = {}));
})(StatusDynamoDbV2 = exports.StatusDynamoDbV2 || (exports.StatusDynamoDbV2 = {}));
/**
 * @export
 * @namespace StatusKafka
 */
var StatusKafka;
(function (StatusKafka) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["NODOCSYET"] = 'NO_DOCS_YET'] = "NODOCSYET";
        StateEnum[StateEnum["ACTIVE"] = 'ACTIVE'] = "ACTIVE";
        StateEnum[StateEnum["DORMANT"] = 'DORMANT'] = "DORMANT";
    })(StateEnum = StatusKafka.StateEnum || (StatusKafka.StateEnum = {}));
})(StatusKafka = exports.StatusKafka || (exports.StatusKafka = {}));
/**
 * @export
 * @namespace StatusMongoDb
 */
var StatusMongoDb;
(function (StatusMongoDb) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["INITIALIZING"] = 'INITIALIZING'] = "INITIALIZING";
        StateEnum[StateEnum["SCANNINGTABLE"] = 'SCANNING_TABLE'] = "SCANNINGTABLE";
        StateEnum[StateEnum["PROCESSINGSTREAM"] = 'PROCESSING_STREAM'] = "PROCESSINGSTREAM";
    })(StateEnum = StatusMongoDb.StateEnum || (StatusMongoDb.StateEnum = {}));
})(StatusMongoDb = exports.StatusMongoDb || (exports.StatusMongoDb = {}));
/**
 * @export
 * @namespace StatusSnowflake
 */
var StatusSnowflake;
(function (StatusSnowflake) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["INITIALIZING"] = 'INITIALIZING'] = "INITIALIZING";
        StateEnum[StateEnum["EXPORTINGTOS3"] = 'EXPORTING_TO_S3'] = "EXPORTINGTOS3";
        StateEnum[StateEnum["DOWNLOADINGFROMS3"] = 'DOWNLOADING_FROM_S3'] = "DOWNLOADINGFROMS3";
        StateEnum[StateEnum["COMPLETED"] = 'COMPLETED'] = "COMPLETED";
    })(StateEnum = StatusSnowflake.StateEnum || (StatusSnowflake.StateEnum = {}));
})(StatusSnowflake = exports.StatusSnowflake || (exports.StatusSnowflake = {}));
/**
 * @export
 * @namespace UpdateApiKeyRequest
 */
var UpdateApiKeyRequest;
(function (UpdateApiKeyRequest) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["ACTIVE"] = 'ACTIVE'] = "ACTIVE";
        StateEnum[StateEnum["SUSPENDED"] = 'SUSPENDED'] = "SUSPENDED";
    })(StateEnum = UpdateApiKeyRequest.StateEnum || (UpdateApiKeyRequest.StateEnum = {}));
})(UpdateApiKeyRequest = exports.UpdateApiKeyRequest || (exports.UpdateApiKeyRequest = {}));
/**
 * @export
 * @namespace UpdateVirtualInstanceRequest
 */
var UpdateVirtualInstanceRequest;
(function (UpdateVirtualInstanceRequest) {
    /**
     * @export
     * @enum {string}
     */
    var NewSizeEnum;
    (function (NewSizeEnum) {
        NewSizeEnum[NewSizeEnum["FREE"] = 'FREE'] = "FREE";
        NewSizeEnum[NewSizeEnum["NANO"] = 'NANO'] = "NANO";
        NewSizeEnum[NewSizeEnum["SHARED"] = 'SHARED'] = "SHARED";
        NewSizeEnum[NewSizeEnum["MILLI"] = 'MILLI'] = "MILLI";
        NewSizeEnum[NewSizeEnum["SMALL"] = 'SMALL'] = "SMALL";
        NewSizeEnum[NewSizeEnum["MEDIUM"] = 'MEDIUM'] = "MEDIUM";
        NewSizeEnum[NewSizeEnum["LARGE"] = 'LARGE'] = "LARGE";
        NewSizeEnum[NewSizeEnum["XLARGE"] = 'XLARGE'] = "XLARGE";
        NewSizeEnum[NewSizeEnum["XLARGE2"] = 'XLARGE2'] = "XLARGE2";
        NewSizeEnum[NewSizeEnum["XLARGE4"] = 'XLARGE4'] = "XLARGE4";
        NewSizeEnum[NewSizeEnum["XLARGE8"] = 'XLARGE8'] = "XLARGE8";
        NewSizeEnum[NewSizeEnum["XLARGE16"] = 'XLARGE16'] = "XLARGE16";
    })(NewSizeEnum = UpdateVirtualInstanceRequest.NewSizeEnum || (UpdateVirtualInstanceRequest.NewSizeEnum = {}));
})(UpdateVirtualInstanceRequest = exports.UpdateVirtualInstanceRequest || (exports.UpdateVirtualInstanceRequest = {}));
/**
 * @export
 * @namespace View
 */
var View;
(function (View) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["CREATED"] = 'CREATED'] = "CREATED";
        StateEnum[StateEnum["SYNCING"] = 'SYNCING'] = "SYNCING";
        StateEnum[StateEnum["DELETED"] = 'DELETED'] = "DELETED";
    })(StateEnum = View.StateEnum || (View.StateEnum = {}));
})(View = exports.View || (exports.View = {}));
/**
 * @export
 * @namespace VirtualInstance
 */
var VirtualInstance;
(function (VirtualInstance) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["INITIALIZING"] = 'INITIALIZING'] = "INITIALIZING";
        StateEnum[StateEnum["PROVISIONINGRESOURCES"] = 'PROVISIONING_RESOURCES'] = "PROVISIONINGRESOURCES";
        StateEnum[StateEnum["REBALANCINGCOLLECTIONS"] = 'REBALANCING_COLLECTIONS'] = "REBALANCINGCOLLECTIONS";
        StateEnum[StateEnum["ACTIVE"] = 'ACTIVE'] = "ACTIVE";
        StateEnum[StateEnum["SUSPENDING"] = 'SUSPENDING'] = "SUSPENDING";
        StateEnum[StateEnum["SUSPENDED"] = 'SUSPENDED'] = "SUSPENDED";
        StateEnum[StateEnum["RESUMING"] = 'RESUMING'] = "RESUMING";
        StateEnum[StateEnum["DELETED"] = 'DELETED'] = "DELETED";
    })(StateEnum = VirtualInstance.StateEnum || (VirtualInstance.StateEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var CurrentSizeEnum;
    (function (CurrentSizeEnum) {
        CurrentSizeEnum[CurrentSizeEnum["FREE"] = 'FREE'] = "FREE";
        CurrentSizeEnum[CurrentSizeEnum["NANO"] = 'NANO'] = "NANO";
        CurrentSizeEnum[CurrentSizeEnum["SHARED"] = 'SHARED'] = "SHARED";
        CurrentSizeEnum[CurrentSizeEnum["MILLI"] = 'MILLI'] = "MILLI";
        CurrentSizeEnum[CurrentSizeEnum["SMALL"] = 'SMALL'] = "SMALL";
        CurrentSizeEnum[CurrentSizeEnum["MEDIUM"] = 'MEDIUM'] = "MEDIUM";
        CurrentSizeEnum[CurrentSizeEnum["LARGE"] = 'LARGE'] = "LARGE";
        CurrentSizeEnum[CurrentSizeEnum["XLARGE"] = 'XLARGE'] = "XLARGE";
        CurrentSizeEnum[CurrentSizeEnum["XLARGE2"] = 'XLARGE2'] = "XLARGE2";
        CurrentSizeEnum[CurrentSizeEnum["XLARGE4"] = 'XLARGE4'] = "XLARGE4";
        CurrentSizeEnum[CurrentSizeEnum["XLARGE8"] = 'XLARGE8'] = "XLARGE8";
        CurrentSizeEnum[CurrentSizeEnum["XLARGE16"] = 'XLARGE16'] = "XLARGE16";
    })(CurrentSizeEnum = VirtualInstance.CurrentSizeEnum || (VirtualInstance.CurrentSizeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var DesiredSizeEnum;
    (function (DesiredSizeEnum) {
        DesiredSizeEnum[DesiredSizeEnum["FREE"] = 'FREE'] = "FREE";
        DesiredSizeEnum[DesiredSizeEnum["NANO"] = 'NANO'] = "NANO";
        DesiredSizeEnum[DesiredSizeEnum["SHARED"] = 'SHARED'] = "SHARED";
        DesiredSizeEnum[DesiredSizeEnum["MILLI"] = 'MILLI'] = "MILLI";
        DesiredSizeEnum[DesiredSizeEnum["SMALL"] = 'SMALL'] = "SMALL";
        DesiredSizeEnum[DesiredSizeEnum["MEDIUM"] = 'MEDIUM'] = "MEDIUM";
        DesiredSizeEnum[DesiredSizeEnum["LARGE"] = 'LARGE'] = "LARGE";
        DesiredSizeEnum[DesiredSizeEnum["XLARGE"] = 'XLARGE'] = "XLARGE";
        DesiredSizeEnum[DesiredSizeEnum["XLARGE2"] = 'XLARGE2'] = "XLARGE2";
        DesiredSizeEnum[DesiredSizeEnum["XLARGE4"] = 'XLARGE4'] = "XLARGE4";
        DesiredSizeEnum[DesiredSizeEnum["XLARGE8"] = 'XLARGE8'] = "XLARGE8";
        DesiredSizeEnum[DesiredSizeEnum["XLARGE16"] = 'XLARGE16'] = "XLARGE16";
    })(DesiredSizeEnum = VirtualInstance.DesiredSizeEnum || (VirtualInstance.DesiredSizeEnum = {}));
})(VirtualInstance = exports.VirtualInstance || (exports.VirtualInstance = {}));
/**
 * APIKeysApi - fetch parameter creator
 * @export
 */
exports.APIKeysApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create a new API key for the authenticated user.
         * @summary Create API Key
         * @param {CreateApiKeyRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createApiKey.');
            }
            var localVarPath = "/v1/orgs/self/users/self/apikeys";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateApiKeyRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an API key for any user in your organization.
         * @summary Delete API Key
         * @param {string} name Name of the API key.
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey: function (name, user, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling deleteApiKey.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling deleteApiKey.');
            }
            var localVarPath = "/v1/orgs/self/users/{user}/apikeys/{name}"
                .replace("{" + "name" + "}", encodeURIComponent(String(name)))
                .replace("{" + "user" + "}", encodeURIComponent(String(user)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a particular API key for any user in your organization.
         * @summary Retrieve API Key
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {string} name Name of the API key.
         * @param {boolean} [reveal] Reveal full key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKey: function (user, name, reveal, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling getApiKey.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling getApiKey.');
            }
            var localVarPath = "/v1/orgs/self/users/{user}/apikeys/{name}"
                .replace("{" + "user" + "}", encodeURIComponent(String(user)))
                .replace("{" + "name" + "}", encodeURIComponent(String(name)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (reveal !== undefined) {
                localVarQueryParameter['reveal'] = reveal;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List API key metadata for any user in your organization.
         * @summary List API Keys
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiKeys: function (user, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling listApiKeys.');
            }
            var localVarPath = "/v1/orgs/self/users/{user}/apikeys"
                .replace("{" + "user" + "}", encodeURIComponent(String(user)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the state of an API key for any user in your organization.
         * @summary Update API Key State
         * @param {string} name Name of the API key.
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {UpdateApiKeyRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiKey: function (name, user, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling updateApiKey.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling updateApiKey.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateApiKey.');
            }
            var localVarPath = "/v1/orgs/self/users/{user}/apikeys/{name}"
                .replace("{" + "name" + "}", encodeURIComponent(String(name)))
                .replace("{" + "user" + "}", encodeURIComponent(String(user)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateApiKeyRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * APIKeysApi - functional programming interface
 * @export
 */
exports.APIKeysApiFp = function (configuration) {
    return {
        /**
         * Create a new API key for the authenticated user.
         * @summary Create API Key
         * @param {CreateApiKeyRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey: function (body, options) {
            var localVarFetchArgs = exports.APIKeysApiFetchParamCreator(configuration).createApiKey(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete an API key for any user in your organization.
         * @summary Delete API Key
         * @param {string} name Name of the API key.
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey: function (name, user, options) {
            var localVarFetchArgs = exports.APIKeysApiFetchParamCreator(configuration).deleteApiKey(name, user, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a particular API key for any user in your organization.
         * @summary Retrieve API Key
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {string} name Name of the API key.
         * @param {boolean} [reveal] Reveal full key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKey: function (user, name, reveal, options) {
            var localVarFetchArgs = exports.APIKeysApiFetchParamCreator(configuration).getApiKey(user, name, reveal, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List API key metadata for any user in your organization.
         * @summary List API Keys
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiKeys: function (user, options) {
            var localVarFetchArgs = exports.APIKeysApiFetchParamCreator(configuration).listApiKeys(user, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the state of an API key for any user in your organization.
         * @summary Update API Key State
         * @param {string} name Name of the API key.
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {UpdateApiKeyRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiKey: function (name, user, body, options) {
            var localVarFetchArgs = exports.APIKeysApiFetchParamCreator(configuration).updateApiKey(name, user, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * APIKeysApi - factory interface
 * @export
 */
exports.APIKeysApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create a new API key for the authenticated user.
         * @summary Create API Key
         * @param {CreateApiKeyRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey: function (body, options) {
            return exports.APIKeysApiFp(configuration).createApiKey(body, options)(fetch, basePath);
        },
        /**
         * Delete an API key for any user in your organization.
         * @summary Delete API Key
         * @param {string} name Name of the API key.
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey: function (name, user, options) {
            return exports.APIKeysApiFp(configuration).deleteApiKey(name, user, options)(fetch, basePath);
        },
        /**
         * Retrieve a particular API key for any user in your organization.
         * @summary Retrieve API Key
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {string} name Name of the API key.
         * @param {boolean} [reveal] Reveal full key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKey: function (user, name, reveal, options) {
            return exports.APIKeysApiFp(configuration).getApiKey(user, name, reveal, options)(fetch, basePath);
        },
        /**
         * List API key metadata for any user in your organization.
         * @summary List API Keys
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiKeys: function (user, options) {
            return exports.APIKeysApiFp(configuration).listApiKeys(user, options)(fetch, basePath);
        },
        /**
         * Update the state of an API key for any user in your organization.
         * @summary Update API Key State
         * @param {string} name Name of the API key.
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {UpdateApiKeyRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiKey: function (name, user, body, options) {
            return exports.APIKeysApiFp(configuration).updateApiKey(name, user, body, options)(fetch, basePath);
        },
    };
};
/**
 * APIKeysApi - object-oriented interface
 * @export
 * @class APIKeysApi
 * @extends {BaseAPI}
 */
var APIKeysApi = /** @class */ (function (_super) {
    __extends(APIKeysApi, _super);
    function APIKeysApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new API key for the authenticated user.
     * @summary Create API Key
     * @param {CreateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    APIKeysApi.prototype.createApiKey = function (body, options) {
        return exports.APIKeysApiFp(this.configuration).createApiKey(body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete an API key for any user in your organization.
     * @summary Delete API Key
     * @param {string} name Name of the API key.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    APIKeysApi.prototype.deleteApiKey = function (name, user, options) {
        return exports.APIKeysApiFp(this.configuration).deleteApiKey(name, user, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a particular API key for any user in your organization.
     * @summary Retrieve API Key
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {string} name Name of the API key.
     * @param {boolean} [reveal] Reveal full key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    APIKeysApi.prototype.getApiKey = function (user, name, reveal, options) {
        return exports.APIKeysApiFp(this.configuration).getApiKey(user, name, reveal, options)(this.fetch, this.basePath);
    };
    /**
     * List API key metadata for any user in your organization.
     * @summary List API Keys
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    APIKeysApi.prototype.listApiKeys = function (user, options) {
        return exports.APIKeysApiFp(this.configuration).listApiKeys(user, options)(this.fetch, this.basePath);
    };
    /**
     * Update the state of an API key for any user in your organization.
     * @summary Update API Key State
     * @param {string} name Name of the API key.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {UpdateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    APIKeysApi.prototype.updateApiKey = function (name, user, body, options) {
        return exports.APIKeysApiFp(this.configuration).updateApiKey(name, user, body, options)(this.fetch, this.basePath);
    };
    return APIKeysApi;
}(BaseAPI));
exports.APIKeysApi = APIKeysApi;
/**
 * AliasesApi - fetch parameter creator
 * @export
 */
exports.AliasesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create new alias in a workspace.
         * @summary Create Alias
         * @param {string} workspace name of the workspace
         * @param {CreateAliasRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlias: function (workspace, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling createAlias.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createAlias.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/aliases"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateAliasRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an alias.
         * @summary Delete Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlias: function (workspace, alias, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling deleteAlias.');
            }
            // verify required parameter 'alias' is not null or undefined
            if (alias === null || alias === undefined) {
                throw new RequiredError('alias', 'Required parameter alias was null or undefined when calling deleteAlias.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/aliases/{alias}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "alias" + "}", encodeURIComponent(String(alias)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details about an alias
         * @summary Retrieve Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlias: function (workspace, alias, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling getAlias.');
            }
            // verify required parameter 'alias' is not null or undefined
            if (alias === null || alias === undefined) {
                throw new RequiredError('alias', 'Required parameter alias was null or undefined when calling getAlias.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/aliases/{alias}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "alias" + "}", encodeURIComponent(String(alias)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all aliases in an organization
         * @summary List Aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAliases: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/aliases";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update alias in a workspace.
         * @summary Update Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {UpdateAliasRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlias: function (workspace, alias, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling updateAlias.');
            }
            // verify required parameter 'alias' is not null or undefined
            if (alias === null || alias === undefined) {
                throw new RequiredError('alias', 'Required parameter alias was null or undefined when calling updateAlias.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateAlias.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/aliases/{alias}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "alias" + "}", encodeURIComponent(String(alias)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateAliasRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all aliases in a workspace.
         * @summary List Aliases in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceAliases: function (workspace, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling workspaceAliases.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/aliases"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AliasesApi - functional programming interface
 * @export
 */
exports.AliasesApiFp = function (configuration) {
    return {
        /**
         * Create new alias in a workspace.
         * @summary Create Alias
         * @param {string} workspace name of the workspace
         * @param {CreateAliasRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlias: function (workspace, body, options) {
            var localVarFetchArgs = exports.AliasesApiFetchParamCreator(configuration).createAlias(workspace, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete an alias.
         * @summary Delete Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlias: function (workspace, alias, options) {
            var localVarFetchArgs = exports.AliasesApiFetchParamCreator(configuration).deleteAlias(workspace, alias, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get details about an alias
         * @summary Retrieve Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlias: function (workspace, alias, options) {
            var localVarFetchArgs = exports.AliasesApiFetchParamCreator(configuration).getAlias(workspace, alias, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all aliases in an organization
         * @summary List Aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAliases: function (options) {
            var localVarFetchArgs = exports.AliasesApiFetchParamCreator(configuration).listAliases(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update alias in a workspace.
         * @summary Update Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {UpdateAliasRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlias: function (workspace, alias, body, options) {
            var localVarFetchArgs = exports.AliasesApiFetchParamCreator(configuration).updateAlias(workspace, alias, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all aliases in a workspace.
         * @summary List Aliases in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceAliases: function (workspace, options) {
            var localVarFetchArgs = exports.AliasesApiFetchParamCreator(configuration).workspaceAliases(workspace, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AliasesApi - factory interface
 * @export
 */
exports.AliasesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create new alias in a workspace.
         * @summary Create Alias
         * @param {string} workspace name of the workspace
         * @param {CreateAliasRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlias: function (workspace, body, options) {
            return exports.AliasesApiFp(configuration).createAlias(workspace, body, options)(fetch, basePath);
        },
        /**
         * Delete an alias.
         * @summary Delete Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlias: function (workspace, alias, options) {
            return exports.AliasesApiFp(configuration).deleteAlias(workspace, alias, options)(fetch, basePath);
        },
        /**
         * Get details about an alias
         * @summary Retrieve Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlias: function (workspace, alias, options) {
            return exports.AliasesApiFp(configuration).getAlias(workspace, alias, options)(fetch, basePath);
        },
        /**
         * Retrieve all aliases in an organization
         * @summary List Aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAliases: function (options) {
            return exports.AliasesApiFp(configuration).listAliases(options)(fetch, basePath);
        },
        /**
         * Update alias in a workspace.
         * @summary Update Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {UpdateAliasRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlias: function (workspace, alias, body, options) {
            return exports.AliasesApiFp(configuration).updateAlias(workspace, alias, body, options)(fetch, basePath);
        },
        /**
         * Retrieve all aliases in a workspace.
         * @summary List Aliases in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceAliases: function (workspace, options) {
            return exports.AliasesApiFp(configuration).workspaceAliases(workspace, options)(fetch, basePath);
        },
    };
};
/**
 * AliasesApi - object-oriented interface
 * @export
 * @class AliasesApi
 * @extends {BaseAPI}
 */
var AliasesApi = /** @class */ (function (_super) {
    __extends(AliasesApi, _super);
    function AliasesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create new alias in a workspace.
     * @summary Create Alias
     * @param {string} workspace name of the workspace
     * @param {CreateAliasRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    AliasesApi.prototype.createAlias = function (workspace, body, options) {
        return exports.AliasesApiFp(this.configuration).createAlias(workspace, body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete an alias.
     * @summary Delete Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    AliasesApi.prototype.deleteAlias = function (workspace, alias, options) {
        return exports.AliasesApiFp(this.configuration).deleteAlias(workspace, alias, options)(this.fetch, this.basePath);
    };
    /**
     * Get details about an alias
     * @summary Retrieve Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    AliasesApi.prototype.getAlias = function (workspace, alias, options) {
        return exports.AliasesApiFp(this.configuration).getAlias(workspace, alias, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all aliases in an organization
     * @summary List Aliases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    AliasesApi.prototype.listAliases = function (options) {
        return exports.AliasesApiFp(this.configuration).listAliases(options)(this.fetch, this.basePath);
    };
    /**
     * Update alias in a workspace.
     * @summary Update Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {UpdateAliasRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    AliasesApi.prototype.updateAlias = function (workspace, alias, body, options) {
        return exports.AliasesApiFp(this.configuration).updateAlias(workspace, alias, body, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all aliases in a workspace.
     * @summary List Aliases in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    AliasesApi.prototype.workspaceAliases = function (workspace, options) {
        return exports.AliasesApiFp(this.configuration).workspaceAliases(workspace, options)(this.fetch, this.basePath);
    };
    return AliasesApi;
}(BaseAPI));
exports.AliasesApi = AliasesApi;
/**
 * CollectionsApi - fetch parameter creator
 * @export
 */
exports.CollectionsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create new collection in a workspace.
         * @summary Create Collection
         * @param {string} workspace name of the workspace
         * @param {CreateCollectionRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection: function (workspace, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling createCollection.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createCollection.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateCollectionRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a collection and all its documents from Rockset.
         * @summary Delete Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection: function (workspace, collection, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling deleteCollection.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling deleteCollection.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details about a collection.
         * @summary Retrieve Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollection: function (workspace, collection, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling getCollection.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling getCollection.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all collections in an organization.
         * @summary List Collections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/collections";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all collections in a workspace.
         * @summary List Collections in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceCollections: function (workspace, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling workspaceCollections.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CollectionsApi - functional programming interface
 * @export
 */
exports.CollectionsApiFp = function (configuration) {
    return {
        /**
         * Create new collection in a workspace.
         * @summary Create Collection
         * @param {string} workspace name of the workspace
         * @param {CreateCollectionRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection: function (workspace, body, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).createCollection(workspace, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a collection and all its documents from Rockset.
         * @summary Delete Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection: function (workspace, collection, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).deleteCollection(workspace, collection, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get details about a collection.
         * @summary Retrieve Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollection: function (workspace, collection, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).getCollection(workspace, collection, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all collections in an organization.
         * @summary List Collections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections: function (options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).listCollections(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all collections in a workspace.
         * @summary List Collections in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceCollections: function (workspace, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).workspaceCollections(workspace, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * CollectionsApi - factory interface
 * @export
 */
exports.CollectionsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create new collection in a workspace.
         * @summary Create Collection
         * @param {string} workspace name of the workspace
         * @param {CreateCollectionRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection: function (workspace, body, options) {
            return exports.CollectionsApiFp(configuration).createCollection(workspace, body, options)(fetch, basePath);
        },
        /**
         * Delete a collection and all its documents from Rockset.
         * @summary Delete Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection: function (workspace, collection, options) {
            return exports.CollectionsApiFp(configuration).deleteCollection(workspace, collection, options)(fetch, basePath);
        },
        /**
         * Get details about a collection.
         * @summary Retrieve Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollection: function (workspace, collection, options) {
            return exports.CollectionsApiFp(configuration).getCollection(workspace, collection, options)(fetch, basePath);
        },
        /**
         * Retrieve all collections in an organization.
         * @summary List Collections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections: function (options) {
            return exports.CollectionsApiFp(configuration).listCollections(options)(fetch, basePath);
        },
        /**
         * Retrieve all collections in a workspace.
         * @summary List Collections in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceCollections: function (workspace, options) {
            return exports.CollectionsApiFp(configuration).workspaceCollections(workspace, options)(fetch, basePath);
        },
    };
};
/**
 * CollectionsApi - object-oriented interface
 * @export
 * @class CollectionsApi
 * @extends {BaseAPI}
 */
var CollectionsApi = /** @class */ (function (_super) {
    __extends(CollectionsApi, _super);
    function CollectionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create new collection in a workspace.
     * @summary Create Collection
     * @param {string} workspace name of the workspace
     * @param {CreateCollectionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.createCollection = function (workspace, body, options) {
        return exports.CollectionsApiFp(this.configuration).createCollection(workspace, body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a collection and all its documents from Rockset.
     * @summary Delete Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.deleteCollection = function (workspace, collection, options) {
        return exports.CollectionsApiFp(this.configuration).deleteCollection(workspace, collection, options)(this.fetch, this.basePath);
    };
    /**
     * Get details about a collection.
     * @summary Retrieve Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.getCollection = function (workspace, collection, options) {
        return exports.CollectionsApiFp(this.configuration).getCollection(workspace, collection, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all collections in an organization.
     * @summary List Collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.listCollections = function (options) {
        return exports.CollectionsApiFp(this.configuration).listCollections(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all collections in a workspace.
     * @summary List Collections in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.workspaceCollections = function (workspace, options) {
        return exports.CollectionsApiFp(this.configuration).workspaceCollections(workspace, options)(this.fetch, this.basePath);
    };
    return CollectionsApi;
}(BaseAPI));
exports.CollectionsApi = CollectionsApi;
/**
 * CustomRolesApi - fetch parameter creator
 * @export
 */
exports.CustomRolesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create a role for your organization.
         * @summary Create a Role
         * @param {CreateRoleRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createRole.');
            }
            var localVarPath = "/v1/orgs/self/roles";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateRoleRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a role for your organization.
         * @summary Delete a Role
         * @param {string} roleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: function (roleName, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'roleName' is not null or undefined
            if (roleName === null || roleName === undefined) {
                throw new RequiredError('roleName', 'Required parameter roleName was null or undefined when calling deleteRole.');
            }
            var localVarPath = "/v1/orgs/self/roles/{roleName}"
                .replace("{" + "roleName" + "}", encodeURIComponent(String(roleName)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a role by name for your organization.
         * @summary Retrieve role
         * @param {string} roleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole: function (roleName, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'roleName' is not null or undefined
            if (roleName === null || roleName === undefined) {
                throw new RequiredError('roleName', 'Required parameter roleName was null or undefined when calling getRole.');
            }
            var localVarPath = "/v1/orgs/self/roles/{roleName}"
                .replace("{" + "roleName" + "}", encodeURIComponent(String(roleName)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all roles for your organization.
         * @summary List Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/roles";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a role for your organization.
         * @summary Update a Role
         * @param {string} roleName
         * @param {UpdateRoleRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: function (roleName, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'roleName' is not null or undefined
            if (roleName === null || roleName === undefined) {
                throw new RequiredError('roleName', 'Required parameter roleName was null or undefined when calling updateRole.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateRole.');
            }
            var localVarPath = "/v1/orgs/self/roles/{roleName}"
                .replace("{" + "roleName" + "}", encodeURIComponent(String(roleName)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateRoleRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CustomRolesApi - functional programming interface
 * @export
 */
exports.CustomRolesApiFp = function (configuration) {
    return {
        /**
         * Create a role for your organization.
         * @summary Create a Role
         * @param {CreateRoleRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: function (body, options) {
            var localVarFetchArgs = exports.CustomRolesApiFetchParamCreator(configuration).createRole(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a role for your organization.
         * @summary Delete a Role
         * @param {string} roleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: function (roleName, options) {
            var localVarFetchArgs = exports.CustomRolesApiFetchParamCreator(configuration).deleteRole(roleName, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a role by name for your organization.
         * @summary Retrieve role
         * @param {string} roleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole: function (roleName, options) {
            var localVarFetchArgs = exports.CustomRolesApiFetchParamCreator(configuration).getRole(roleName, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all roles for your organization.
         * @summary List Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: function (options) {
            var localVarFetchArgs = exports.CustomRolesApiFetchParamCreator(configuration).listRoles(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a role for your organization.
         * @summary Update a Role
         * @param {string} roleName
         * @param {UpdateRoleRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: function (roleName, body, options) {
            var localVarFetchArgs = exports.CustomRolesApiFetchParamCreator(configuration).updateRole(roleName, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * CustomRolesApi - factory interface
 * @export
 */
exports.CustomRolesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create a role for your organization.
         * @summary Create a Role
         * @param {CreateRoleRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: function (body, options) {
            return exports.CustomRolesApiFp(configuration).createRole(body, options)(fetch, basePath);
        },
        /**
         * Delete a role for your organization.
         * @summary Delete a Role
         * @param {string} roleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: function (roleName, options) {
            return exports.CustomRolesApiFp(configuration).deleteRole(roleName, options)(fetch, basePath);
        },
        /**
         * Retrieve a role by name for your organization.
         * @summary Retrieve role
         * @param {string} roleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole: function (roleName, options) {
            return exports.CustomRolesApiFp(configuration).getRole(roleName, options)(fetch, basePath);
        },
        /**
         * List all roles for your organization.
         * @summary List Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: function (options) {
            return exports.CustomRolesApiFp(configuration).listRoles(options)(fetch, basePath);
        },
        /**
         * Update a role for your organization.
         * @summary Update a Role
         * @param {string} roleName
         * @param {UpdateRoleRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: function (roleName, body, options) {
            return exports.CustomRolesApiFp(configuration).updateRole(roleName, body, options)(fetch, basePath);
        },
    };
};
/**
 * CustomRolesApi - object-oriented interface
 * @export
 * @class CustomRolesApi
 * @extends {BaseAPI}
 */
var CustomRolesApi = /** @class */ (function (_super) {
    __extends(CustomRolesApi, _super);
    function CustomRolesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a role for your organization.
     * @summary Create a Role
     * @param {CreateRoleRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesApi
     */
    CustomRolesApi.prototype.createRole = function (body, options) {
        return exports.CustomRolesApiFp(this.configuration).createRole(body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a role for your organization.
     * @summary Delete a Role
     * @param {string} roleName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesApi
     */
    CustomRolesApi.prototype.deleteRole = function (roleName, options) {
        return exports.CustomRolesApiFp(this.configuration).deleteRole(roleName, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a role by name for your organization.
     * @summary Retrieve role
     * @param {string} roleName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesApi
     */
    CustomRolesApi.prototype.getRole = function (roleName, options) {
        return exports.CustomRolesApiFp(this.configuration).getRole(roleName, options)(this.fetch, this.basePath);
    };
    /**
     * List all roles for your organization.
     * @summary List Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesApi
     */
    CustomRolesApi.prototype.listRoles = function (options) {
        return exports.CustomRolesApiFp(this.configuration).listRoles(options)(this.fetch, this.basePath);
    };
    /**
     * Update a role for your organization.
     * @summary Update a Role
     * @param {string} roleName
     * @param {UpdateRoleRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesApi
     */
    CustomRolesApi.prototype.updateRole = function (roleName, body, options) {
        return exports.CustomRolesApiFp(this.configuration).updateRole(roleName, body, options)(this.fetch, this.basePath);
    };
    return CustomRolesApi;
}(BaseAPI));
exports.CustomRolesApi = CustomRolesApi;
/**
 * DocumentsApi - fetch parameter creator
 * @export
 */
exports.DocumentsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Add documents to a collection.
         * @summary Add Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {AddDocumentsRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDocuments: function (workspace, collection, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling addDocuments.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling addDocuments.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling addDocuments.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/docs"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AddDocumentsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete documents from a collection.
         * @summary Delete Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {DeleteDocumentsRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocuments: function (workspace, collection, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling deleteDocuments.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling deleteDocuments.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling deleteDocuments.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/docs"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("DeleteDocumentsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update existing documents in a collection.
         * @summary Patch Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {PatchDocumentsRequest} body JSON Patch objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDocuments: function (workspace, collection, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling patchDocuments.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling patchDocuments.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling patchDocuments.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/docs"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("PatchDocumentsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DocumentsApi - functional programming interface
 * @export
 */
exports.DocumentsApiFp = function (configuration) {
    return {
        /**
         * Add documents to a collection.
         * @summary Add Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {AddDocumentsRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDocuments: function (workspace, collection, body, options) {
            var localVarFetchArgs = exports.DocumentsApiFetchParamCreator(configuration).addDocuments(workspace, collection, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete documents from a collection.
         * @summary Delete Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {DeleteDocumentsRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocuments: function (workspace, collection, body, options) {
            var localVarFetchArgs = exports.DocumentsApiFetchParamCreator(configuration).deleteDocuments(workspace, collection, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update existing documents in a collection.
         * @summary Patch Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {PatchDocumentsRequest} body JSON Patch objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDocuments: function (workspace, collection, body, options) {
            var localVarFetchArgs = exports.DocumentsApiFetchParamCreator(configuration).patchDocuments(workspace, collection, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * DocumentsApi - factory interface
 * @export
 */
exports.DocumentsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Add documents to a collection.
         * @summary Add Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {AddDocumentsRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDocuments: function (workspace, collection, body, options) {
            return exports.DocumentsApiFp(configuration).addDocuments(workspace, collection, body, options)(fetch, basePath);
        },
        /**
         * Delete documents from a collection.
         * @summary Delete Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {DeleteDocumentsRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocuments: function (workspace, collection, body, options) {
            return exports.DocumentsApiFp(configuration).deleteDocuments(workspace, collection, body, options)(fetch, basePath);
        },
        /**
         * Update existing documents in a collection.
         * @summary Patch Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {PatchDocumentsRequest} body JSON Patch objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDocuments: function (workspace, collection, body, options) {
            return exports.DocumentsApiFp(configuration).patchDocuments(workspace, collection, body, options)(fetch, basePath);
        },
    };
};
/**
 * DocumentsApi - object-oriented interface
 * @export
 * @class DocumentsApi
 * @extends {BaseAPI}
 */
var DocumentsApi = /** @class */ (function (_super) {
    __extends(DocumentsApi, _super);
    function DocumentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add documents to a collection.
     * @summary Add Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {AddDocumentsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    DocumentsApi.prototype.addDocuments = function (workspace, collection, body, options) {
        return exports.DocumentsApiFp(this.configuration).addDocuments(workspace, collection, body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete documents from a collection.
     * @summary Delete Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {DeleteDocumentsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    DocumentsApi.prototype.deleteDocuments = function (workspace, collection, body, options) {
        return exports.DocumentsApiFp(this.configuration).deleteDocuments(workspace, collection, body, options)(this.fetch, this.basePath);
    };
    /**
     * Update existing documents in a collection.
     * @summary Patch Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {PatchDocumentsRequest} body JSON Patch objects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    DocumentsApi.prototype.patchDocuments = function (workspace, collection, body, options) {
        return exports.DocumentsApiFp(this.configuration).patchDocuments(workspace, collection, body, options)(this.fetch, this.basePath);
    };
    return DocumentsApi;
}(BaseAPI));
exports.DocumentsApi = DocumentsApi;
/**
 * IntegrationsApi - fetch parameter creator
 * @export
 */
exports.IntegrationsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {CreateIntegrationRequest} body integration credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegration: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createIntegration.');
            }
            var localVarPath = "/v1/orgs/self/integrations";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateIntegrationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an integration.
         * @summary Delete Integration
         * @param {string} integration name of the integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntegration: function (integration, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'integration' is not null or undefined
            if (integration === null || integration === undefined) {
                throw new RequiredError('integration', 'Required parameter integration was null or undefined when calling deleteIntegration.');
            }
            var localVarPath = "/v1/orgs/self/integrations/{integration}"
                .replace("{" + "integration" + "}", encodeURIComponent(String(integration)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about a single integration.
         * @summary Retrieve Integration
         * @param {string} integration name of the integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegration: function (integration, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'integration' is not null or undefined
            if (integration === null || integration === undefined) {
                throw new RequiredError('integration', 'Required parameter integration was null or undefined when calling getIntegration.');
            }
            var localVarPath = "/v1/orgs/self/integrations/{integration}"
                .replace("{" + "integration" + "}", encodeURIComponent(String(integration)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all integrations in an organization.
         * @summary List Integrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIntegrations: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/integrations";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * IntegrationsApi - functional programming interface
 * @export
 */
exports.IntegrationsApiFp = function (configuration) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {CreateIntegrationRequest} body integration credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegration: function (body, options) {
            var localVarFetchArgs = exports.IntegrationsApiFetchParamCreator(configuration).createIntegration(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Remove an integration.
         * @summary Delete Integration
         * @param {string} integration name of the integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntegration: function (integration, options) {
            var localVarFetchArgs = exports.IntegrationsApiFetchParamCreator(configuration).deleteIntegration(integration, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve information about a single integration.
         * @summary Retrieve Integration
         * @param {string} integration name of the integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegration: function (integration, options) {
            var localVarFetchArgs = exports.IntegrationsApiFetchParamCreator(configuration).getIntegration(integration, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all integrations in an organization.
         * @summary List Integrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIntegrations: function (options) {
            var localVarFetchArgs = exports.IntegrationsApiFetchParamCreator(configuration).listIntegrations(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * IntegrationsApi - factory interface
 * @export
 */
exports.IntegrationsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {CreateIntegrationRequest} body integration credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegration: function (body, options) {
            return exports.IntegrationsApiFp(configuration).createIntegration(body, options)(fetch, basePath);
        },
        /**
         * Remove an integration.
         * @summary Delete Integration
         * @param {string} integration name of the integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntegration: function (integration, options) {
            return exports.IntegrationsApiFp(configuration).deleteIntegration(integration, options)(fetch, basePath);
        },
        /**
         * Retrieve information about a single integration.
         * @summary Retrieve Integration
         * @param {string} integration name of the integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegration: function (integration, options) {
            return exports.IntegrationsApiFp(configuration).getIntegration(integration, options)(fetch, basePath);
        },
        /**
         * List all integrations in an organization.
         * @summary List Integrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIntegrations: function (options) {
            return exports.IntegrationsApiFp(configuration).listIntegrations(options)(fetch, basePath);
        },
    };
};
/**
 * IntegrationsApi - object-oriented interface
 * @export
 * @class IntegrationsApi
 * @extends {BaseAPI}
 */
var IntegrationsApi = /** @class */ (function (_super) {
    __extends(IntegrationsApi, _super);
    function IntegrationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {CreateIntegrationRequest} body integration credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    IntegrationsApi.prototype.createIntegration = function (body, options) {
        return exports.IntegrationsApiFp(this.configuration).createIntegration(body, options)(this.fetch, this.basePath);
    };
    /**
     * Remove an integration.
     * @summary Delete Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    IntegrationsApi.prototype.deleteIntegration = function (integration, options) {
        return exports.IntegrationsApiFp(this.configuration).deleteIntegration(integration, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve information about a single integration.
     * @summary Retrieve Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    IntegrationsApi.prototype.getIntegration = function (integration, options) {
        return exports.IntegrationsApiFp(this.configuration).getIntegration(integration, options)(this.fetch, this.basePath);
    };
    /**
     * List all integrations in an organization.
     * @summary List Integrations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    IntegrationsApi.prototype.listIntegrations = function (options) {
        return exports.IntegrationsApiFp(this.configuration).listIntegrations(options)(this.fetch, this.basePath);
    };
    return IntegrationsApi;
}(BaseAPI));
exports.IntegrationsApi = IntegrationsApi;
/**
 * OrganizationsApi - fetch parameter creator
 * @export
 */
exports.OrganizationsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Retrieve information about current organization.
         * @summary Get Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * OrganizationsApi - functional programming interface
 * @export
 */
exports.OrganizationsApiFp = function (configuration) {
    return {
        /**
         * Retrieve information about current organization.
         * @summary Get Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: function (options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).getOrganization(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * OrganizationsApi - factory interface
 * @export
 */
exports.OrganizationsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Retrieve information about current organization.
         * @summary Get Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: function (options) {
            return exports.OrganizationsApiFp(configuration).getOrganization(options)(fetch, basePath);
        },
    };
};
/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
var OrganizationsApi = /** @class */ (function (_super) {
    __extends(OrganizationsApi, _super);
    function OrganizationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieve information about current organization.
     * @summary Get Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.getOrganization = function (options) {
        return exports.OrganizationsApiFp(this.configuration).getOrganization(options)(this.fetch, this.basePath);
    };
    return OrganizationsApi;
}(BaseAPI));
exports.OrganizationsApi = OrganizationsApi;
/**
 * QueriesApi - fetch parameter creator
 * @export
 */
exports.QueriesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Attempts to cancel an actively-running query.
         * @summary Cancel Query
         * @param {string} queryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelQuery: function (queryId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'queryId' is not null or undefined
            if (queryId === null || queryId === undefined) {
                throw new RequiredError('queryId', 'Required parameter queryId was null or undefined when calling cancelQuery.');
            }
            var localVarPath = "/v1/orgs/self/queries/{queryId}"
                .replace("{" + "queryId" + "}", encodeURIComponent(String(queryId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about a query.
         * @summary Retrieve Query
         * @param {string} queryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuery: function (queryId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'queryId' is not null or undefined
            if (queryId === null || queryId === undefined) {
                throw new RequiredError('queryId', 'Required parameter queryId was null or undefined when calling getQuery.');
            }
            var localVarPath = "/v1/orgs/self/queries/{queryId}"
                .replace("{" + "queryId" + "}", encodeURIComponent(String(queryId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a page of query results.
         * @summary Retrieve Query Results Page
         * @param {string} queryId
         * @param {string} [cursor] Cursor to current page. If unset, will default to the first page.
         * @param {number} [docs] Number of documents to fetch.
         * @param {number} [offset] Offset from the cursor of the first document to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryResults: function (queryId, cursor, docs, offset, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'queryId' is not null or undefined
            if (queryId === null || queryId === undefined) {
                throw new RequiredError('queryId', 'Required parameter queryId was null or undefined when calling getQueryResults.');
            }
            var localVarPath = "/v1/orgs/self/queries/{queryId}/pages"
                .replace("{" + "queryId" + "}", encodeURIComponent(String(queryId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (docs !== undefined) {
                localVarQueryParameter['docs'] = docs;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists actively queued and running queries.
         * @summary List Queries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActiveQueries: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/queries";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Make a SQL query to Rockset.
         * @summary Execute SQL Query
         * @param {QueryRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling query.');
            }
            var localVarPath = "/v1/orgs/self/queries";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("QueryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate a SQL query with Rockset's parser and planner.
         * @summary Validate Query
         * @param {QueryRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validate: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling validate.');
            }
            var localVarPath = "/v1/orgs/self/queries/validations";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("QueryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * QueriesApi - functional programming interface
 * @export
 */
exports.QueriesApiFp = function (configuration) {
    return {
        /**
         * Attempts to cancel an actively-running query.
         * @summary Cancel Query
         * @param {string} queryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelQuery: function (queryId, options) {
            var localVarFetchArgs = exports.QueriesApiFetchParamCreator(configuration).cancelQuery(queryId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns information about a query.
         * @summary Retrieve Query
         * @param {string} queryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuery: function (queryId, options) {
            var localVarFetchArgs = exports.QueriesApiFetchParamCreator(configuration).getQuery(queryId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a page of query results.
         * @summary Retrieve Query Results Page
         * @param {string} queryId
         * @param {string} [cursor] Cursor to current page. If unset, will default to the first page.
         * @param {number} [docs] Number of documents to fetch.
         * @param {number} [offset] Offset from the cursor of the first document to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryResults: function (queryId, cursor, docs, offset, options) {
            var localVarFetchArgs = exports.QueriesApiFetchParamCreator(configuration).getQueryResults(queryId, cursor, docs, offset, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lists actively queued and running queries.
         * @summary List Queries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActiveQueries: function (options) {
            var localVarFetchArgs = exports.QueriesApiFetchParamCreator(configuration).listActiveQueries(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Make a SQL query to Rockset.
         * @summary Execute SQL Query
         * @param {QueryRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query: function (body, options) {
            var localVarFetchArgs = exports.QueriesApiFetchParamCreator(configuration).query(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Validate a SQL query with Rockset's parser and planner.
         * @summary Validate Query
         * @param {QueryRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validate: function (body, options) {
            var localVarFetchArgs = exports.QueriesApiFetchParamCreator(configuration).validate(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * QueriesApi - factory interface
 * @export
 */
exports.QueriesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Attempts to cancel an actively-running query.
         * @summary Cancel Query
         * @param {string} queryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelQuery: function (queryId, options) {
            return exports.QueriesApiFp(configuration).cancelQuery(queryId, options)(fetch, basePath);
        },
        /**
         * Returns information about a query.
         * @summary Retrieve Query
         * @param {string} queryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuery: function (queryId, options) {
            return exports.QueriesApiFp(configuration).getQuery(queryId, options)(fetch, basePath);
        },
        /**
         * Returns a page of query results.
         * @summary Retrieve Query Results Page
         * @param {string} queryId
         * @param {string} [cursor] Cursor to current page. If unset, will default to the first page.
         * @param {number} [docs] Number of documents to fetch.
         * @param {number} [offset] Offset from the cursor of the first document to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryResults: function (queryId, cursor, docs, offset, options) {
            return exports.QueriesApiFp(configuration).getQueryResults(queryId, cursor, docs, offset, options)(fetch, basePath);
        },
        /**
         * Lists actively queued and running queries.
         * @summary List Queries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActiveQueries: function (options) {
            return exports.QueriesApiFp(configuration).listActiveQueries(options)(fetch, basePath);
        },
        /**
         * Make a SQL query to Rockset.
         * @summary Execute SQL Query
         * @param {QueryRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query: function (body, options) {
            return exports.QueriesApiFp(configuration).query(body, options)(fetch, basePath);
        },
        /**
         * Validate a SQL query with Rockset's parser and planner.
         * @summary Validate Query
         * @param {QueryRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validate: function (body, options) {
            return exports.QueriesApiFp(configuration).validate(body, options)(fetch, basePath);
        },
    };
};
/**
 * QueriesApi - object-oriented interface
 * @export
 * @class QueriesApi
 * @extends {BaseAPI}
 */
var QueriesApi = /** @class */ (function (_super) {
    __extends(QueriesApi, _super);
    function QueriesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Attempts to cancel an actively-running query.
     * @summary Cancel Query
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    QueriesApi.prototype.cancelQuery = function (queryId, options) {
        return exports.QueriesApiFp(this.configuration).cancelQuery(queryId, options)(this.fetch, this.basePath);
    };
    /**
     * Returns information about a query.
     * @summary Retrieve Query
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    QueriesApi.prototype.getQuery = function (queryId, options) {
        return exports.QueriesApiFp(this.configuration).getQuery(queryId, options)(this.fetch, this.basePath);
    };
    /**
     * Returns a page of query results.
     * @summary Retrieve Query Results Page
     * @param {string} queryId
     * @param {string} [cursor] Cursor to current page. If unset, will default to the first page.
     * @param {number} [docs] Number of documents to fetch.
     * @param {number} [offset] Offset from the cursor of the first document to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    QueriesApi.prototype.getQueryResults = function (queryId, cursor, docs, offset, options) {
        return exports.QueriesApiFp(this.configuration).getQueryResults(queryId, cursor, docs, offset, options)(this.fetch, this.basePath);
    };
    /**
     * Lists actively queued and running queries.
     * @summary List Queries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    QueriesApi.prototype.listActiveQueries = function (options) {
        return exports.QueriesApiFp(this.configuration).listActiveQueries(options)(this.fetch, this.basePath);
    };
    /**
     * Make a SQL query to Rockset.
     * @summary Execute SQL Query
     * @param {QueryRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    QueriesApi.prototype.query = function (body, options) {
        return exports.QueriesApiFp(this.configuration).query(body, options)(this.fetch, this.basePath);
    };
    /**
     * Validate a SQL query with Rockset's parser and planner.
     * @summary Validate Query
     * @param {QueryRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    QueriesApi.prototype.validate = function (body, options) {
        return exports.QueriesApiFp(this.configuration).validate(body, options)(this.fetch, this.basePath);
    };
    return QueriesApi;
}(BaseAPI));
exports.QueriesApi = QueriesApi;
/**
 * QueryLambdasApi - fetch parameter creator
 * @export
 */
exports.QueryLambdasApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create a Query Lambda in given workspace.
         * @summary Create Query Lambda
         * @param {string} workspace name of the workspace
         * @param {CreateQueryLambdaRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryLambda: function (workspace, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling createQueryLambda.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createQueryLambda.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateQueryLambdaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a tag for a specific Query Lambda version, or update that tag if it already exists.
         * @summary Create Query Lambda Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {CreateQueryLambdaTagRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryLambdaTag: function (workspace, queryLambda, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling createQueryLambdaTag.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling createQueryLambdaTag.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createQueryLambdaTag.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateQueryLambdaTagRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Query Lambda.
         * @summary Delete Query Lambda
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambda: function (workspace, queryLambda, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling deleteQueryLambda.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling deleteQueryLambda.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a tag for a specific Query Lambda
         * @summary Delete Query Lambda Tag Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag name of the tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambdaTag: function (workspace, queryLambda, tag, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling deleteQueryLambdaTag.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling deleteQueryLambdaTag.');
            }
            // verify required parameter 'tag' is not null or undefined
            if (tag === null || tag === undefined) {
                throw new RequiredError('tag', 'Required parameter tag was null or undefined when calling deleteQueryLambdaTag.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)))
                .replace("{" + "tag" + "}", encodeURIComponent(String(tag)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Query Lambda version.
         * @summary Delete Query Lambda Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambdaVersion: function (workspace, queryLambda, version, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling deleteQueryLambdaVersion.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling deleteQueryLambdaVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version', 'Required parameter version was null or undefined when calling deleteQueryLambdaVersion.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/version/{version}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)))
                .replace("{" + "version" + "}", encodeURIComponent(String(version)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Execute a particular version of a Query Lambda.
         * @summary Execute Query Lambda By Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {ExecuteQueryLambdaRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeQueryLambda: function (workspace, queryLambda, version, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling executeQueryLambda.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling executeQueryLambda.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version', 'Required parameter version was null or undefined when calling executeQueryLambda.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions/{version}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)))
                .replace("{" + "version" + "}", encodeURIComponent(String(version)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ExecuteQueryLambdaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Execute the Query Lambda version associated with a given tag.
         * @summary Execute Query Lambda By Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag tag
         * @param {ExecuteQueryLambdaRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeQueryLambdaByTag: function (workspace, queryLambda, tag, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling executeQueryLambdaByTag.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling executeQueryLambdaByTag.');
            }
            // verify required parameter 'tag' is not null or undefined
            if (tag === null || tag === undefined) {
                throw new RequiredError('tag', 'Required parameter tag was null or undefined when calling executeQueryLambdaByTag.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)))
                .replace("{" + "tag" + "}", encodeURIComponent(String(tag)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ExecuteQueryLambdaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the Query Lambda version associated with a given tag.
         * @summary Retrieve Query Lambda Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag name of the tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryLambdaTagVersion: function (workspace, queryLambda, tag, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling getQueryLambdaTagVersion.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling getQueryLambdaTagVersion.');
            }
            // verify required parameter 'tag' is not null or undefined
            if (tag === null || tag === undefined) {
                throw new RequiredError('tag', 'Required parameter tag was null or undefined when calling getQueryLambdaTagVersion.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)))
                .replace("{" + "tag" + "}", encodeURIComponent(String(tag)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details for a specified version of a Query Lambda.
         * @summary Retrieve Query Lambda Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryLambdaVersion: function (workspace, queryLambda, version, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling getQueryLambdaVersion.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling getQueryLambdaVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version', 'Required parameter version was null or undefined when calling getQueryLambdaVersion.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions/{version}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)))
                .replace("{" + "version" + "}", encodeURIComponent(String(version)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Query Lambdas in an organization.
         * @summary List Query Lambdas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllQueryLambdas: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/lambdas";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all tags associated with a Query Lambda
         * @summary List Query Lambda Tags
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdaTags: function (workspace, queryLambda, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling listQueryLambdaTags.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling listQueryLambdaTags.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all versions of a Query Lambda.
         * @summary List Query Lambda Versions
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdaVersions: function (workspace, queryLambda, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling listQueryLambdaVersions.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling listQueryLambdaVersions.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Query Lambdas under given workspace.
         * @summary List Query Lambdas in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdasInWorkspace: function (workspace, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling listQueryLambdasInWorkspace.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new version of a Query Lambda in given workspace.
         * @summary Update Query Lambda
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {UpdateQueryLambdaRequest} body JSON object
         * @param {boolean} [create] Create a new Query Lambda if one does not exist already.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryLambda: function (workspace, queryLambda, body, create, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling updateQueryLambda.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling updateQueryLambda.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateQueryLambda.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (create !== undefined) {
                localVarQueryParameter['create'] = create;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateQueryLambdaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * QueryLambdasApi - functional programming interface
 * @export
 */
exports.QueryLambdasApiFp = function (configuration) {
    return {
        /**
         * Create a Query Lambda in given workspace.
         * @summary Create Query Lambda
         * @param {string} workspace name of the workspace
         * @param {CreateQueryLambdaRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryLambda: function (workspace, body, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).createQueryLambda(workspace, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a tag for a specific Query Lambda version, or update that tag if it already exists.
         * @summary Create Query Lambda Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {CreateQueryLambdaTagRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryLambdaTag: function (workspace, queryLambda, body, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).createQueryLambdaTag(workspace, queryLambda, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a Query Lambda.
         * @summary Delete Query Lambda
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambda: function (workspace, queryLambda, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).deleteQueryLambda(workspace, queryLambda, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a tag for a specific Query Lambda
         * @summary Delete Query Lambda Tag Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag name of the tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambdaTag: function (workspace, queryLambda, tag, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).deleteQueryLambdaTag(workspace, queryLambda, tag, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a Query Lambda version.
         * @summary Delete Query Lambda Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambdaVersion: function (workspace, queryLambda, version, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).deleteQueryLambdaVersion(workspace, queryLambda, version, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Execute a particular version of a Query Lambda.
         * @summary Execute Query Lambda By Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {ExecuteQueryLambdaRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeQueryLambda: function (workspace, queryLambda, version, body, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).executeQueryLambda(workspace, queryLambda, version, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Execute the Query Lambda version associated with a given tag.
         * @summary Execute Query Lambda By Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag tag
         * @param {ExecuteQueryLambdaRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeQueryLambdaByTag: function (workspace, queryLambda, tag, body, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).executeQueryLambdaByTag(workspace, queryLambda, tag, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve the Query Lambda version associated with a given tag.
         * @summary Retrieve Query Lambda Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag name of the tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryLambdaTagVersion: function (workspace, queryLambda, tag, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).getQueryLambdaTagVersion(workspace, queryLambda, tag, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve details for a specified version of a Query Lambda.
         * @summary Retrieve Query Lambda Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryLambdaVersion: function (workspace, queryLambda, version, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).getQueryLambdaVersion(workspace, queryLambda, version, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all Query Lambdas in an organization.
         * @summary List Query Lambdas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllQueryLambdas: function (options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).listAllQueryLambdas(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all tags associated with a Query Lambda
         * @summary List Query Lambda Tags
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdaTags: function (workspace, queryLambda, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).listQueryLambdaTags(workspace, queryLambda, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all versions of a Query Lambda.
         * @summary List Query Lambda Versions
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdaVersions: function (workspace, queryLambda, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).listQueryLambdaVersions(workspace, queryLambda, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all Query Lambdas under given workspace.
         * @summary List Query Lambdas in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdasInWorkspace: function (workspace, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).listQueryLambdasInWorkspace(workspace, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new version of a Query Lambda in given workspace.
         * @summary Update Query Lambda
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {UpdateQueryLambdaRequest} body JSON object
         * @param {boolean} [create] Create a new Query Lambda if one does not exist already.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryLambda: function (workspace, queryLambda, body, create, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).updateQueryLambda(workspace, queryLambda, body, create, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * QueryLambdasApi - factory interface
 * @export
 */
exports.QueryLambdasApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create a Query Lambda in given workspace.
         * @summary Create Query Lambda
         * @param {string} workspace name of the workspace
         * @param {CreateQueryLambdaRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryLambda: function (workspace, body, options) {
            return exports.QueryLambdasApiFp(configuration).createQueryLambda(workspace, body, options)(fetch, basePath);
        },
        /**
         * Create a tag for a specific Query Lambda version, or update that tag if it already exists.
         * @summary Create Query Lambda Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {CreateQueryLambdaTagRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryLambdaTag: function (workspace, queryLambda, body, options) {
            return exports.QueryLambdasApiFp(configuration).createQueryLambdaTag(workspace, queryLambda, body, options)(fetch, basePath);
        },
        /**
         * Delete a Query Lambda.
         * @summary Delete Query Lambda
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambda: function (workspace, queryLambda, options) {
            return exports.QueryLambdasApiFp(configuration).deleteQueryLambda(workspace, queryLambda, options)(fetch, basePath);
        },
        /**
         * Delete a tag for a specific Query Lambda
         * @summary Delete Query Lambda Tag Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag name of the tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambdaTag: function (workspace, queryLambda, tag, options) {
            return exports.QueryLambdasApiFp(configuration).deleteQueryLambdaTag(workspace, queryLambda, tag, options)(fetch, basePath);
        },
        /**
         * Delete a Query Lambda version.
         * @summary Delete Query Lambda Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambdaVersion: function (workspace, queryLambda, version, options) {
            return exports.QueryLambdasApiFp(configuration).deleteQueryLambdaVersion(workspace, queryLambda, version, options)(fetch, basePath);
        },
        /**
         * Execute a particular version of a Query Lambda.
         * @summary Execute Query Lambda By Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {ExecuteQueryLambdaRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeQueryLambda: function (workspace, queryLambda, version, body, options) {
            return exports.QueryLambdasApiFp(configuration).executeQueryLambda(workspace, queryLambda, version, body, options)(fetch, basePath);
        },
        /**
         * Execute the Query Lambda version associated with a given tag.
         * @summary Execute Query Lambda By Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag tag
         * @param {ExecuteQueryLambdaRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeQueryLambdaByTag: function (workspace, queryLambda, tag, body, options) {
            return exports.QueryLambdasApiFp(configuration).executeQueryLambdaByTag(workspace, queryLambda, tag, body, options)(fetch, basePath);
        },
        /**
         * Retrieve the Query Lambda version associated with a given tag.
         * @summary Retrieve Query Lambda Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag name of the tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryLambdaTagVersion: function (workspace, queryLambda, tag, options) {
            return exports.QueryLambdasApiFp(configuration).getQueryLambdaTagVersion(workspace, queryLambda, tag, options)(fetch, basePath);
        },
        /**
         * Retrieve details for a specified version of a Query Lambda.
         * @summary Retrieve Query Lambda Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryLambdaVersion: function (workspace, queryLambda, version, options) {
            return exports.QueryLambdasApiFp(configuration).getQueryLambdaVersion(workspace, queryLambda, version, options)(fetch, basePath);
        },
        /**
         * List all Query Lambdas in an organization.
         * @summary List Query Lambdas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllQueryLambdas: function (options) {
            return exports.QueryLambdasApiFp(configuration).listAllQueryLambdas(options)(fetch, basePath);
        },
        /**
         * List all tags associated with a Query Lambda
         * @summary List Query Lambda Tags
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdaTags: function (workspace, queryLambda, options) {
            return exports.QueryLambdasApiFp(configuration).listQueryLambdaTags(workspace, queryLambda, options)(fetch, basePath);
        },
        /**
         * List all versions of a Query Lambda.
         * @summary List Query Lambda Versions
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdaVersions: function (workspace, queryLambda, options) {
            return exports.QueryLambdasApiFp(configuration).listQueryLambdaVersions(workspace, queryLambda, options)(fetch, basePath);
        },
        /**
         * List all Query Lambdas under given workspace.
         * @summary List Query Lambdas in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdasInWorkspace: function (workspace, options) {
            return exports.QueryLambdasApiFp(configuration).listQueryLambdasInWorkspace(workspace, options)(fetch, basePath);
        },
        /**
         * Create a new version of a Query Lambda in given workspace.
         * @summary Update Query Lambda
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {UpdateQueryLambdaRequest} body JSON object
         * @param {boolean} [create] Create a new Query Lambda if one does not exist already.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryLambda: function (workspace, queryLambda, body, create, options) {
            return exports.QueryLambdasApiFp(configuration).updateQueryLambda(workspace, queryLambda, body, create, options)(fetch, basePath);
        },
    };
};
/**
 * QueryLambdasApi - object-oriented interface
 * @export
 * @class QueryLambdasApi
 * @extends {BaseAPI}
 */
var QueryLambdasApi = /** @class */ (function (_super) {
    __extends(QueryLambdasApi, _super);
    function QueryLambdasApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a Query Lambda in given workspace.
     * @summary Create Query Lambda
     * @param {string} workspace name of the workspace
     * @param {CreateQueryLambdaRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.createQueryLambda = function (workspace, body, options) {
        return exports.QueryLambdasApiFp(this.configuration).createQueryLambda(workspace, body, options)(this.fetch, this.basePath);
    };
    /**
     * Create a tag for a specific Query Lambda version, or update that tag if it already exists.
     * @summary Create Query Lambda Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {CreateQueryLambdaTagRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.createQueryLambdaTag = function (workspace, queryLambda, body, options) {
        return exports.QueryLambdasApiFp(this.configuration).createQueryLambdaTag(workspace, queryLambda, body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a Query Lambda.
     * @summary Delete Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.deleteQueryLambda = function (workspace, queryLambda, options) {
        return exports.QueryLambdasApiFp(this.configuration).deleteQueryLambda(workspace, queryLambda, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a tag for a specific Query Lambda
     * @summary Delete Query Lambda Tag Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.deleteQueryLambdaTag = function (workspace, queryLambda, tag, options) {
        return exports.QueryLambdasApiFp(this.configuration).deleteQueryLambdaTag(workspace, queryLambda, tag, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a Query Lambda version.
     * @summary Delete Query Lambda Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.deleteQueryLambdaVersion = function (workspace, queryLambda, version, options) {
        return exports.QueryLambdasApiFp(this.configuration).deleteQueryLambdaVersion(workspace, queryLambda, version, options)(this.fetch, this.basePath);
    };
    /**
     * Execute a particular version of a Query Lambda.
     * @summary Execute Query Lambda By Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {ExecuteQueryLambdaRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.executeQueryLambda = function (workspace, queryLambda, version, body, options) {
        return exports.QueryLambdasApiFp(this.configuration).executeQueryLambda(workspace, queryLambda, version, body, options)(this.fetch, this.basePath);
    };
    /**
     * Execute the Query Lambda version associated with a given tag.
     * @summary Execute Query Lambda By Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag tag
     * @param {ExecuteQueryLambdaRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.executeQueryLambdaByTag = function (workspace, queryLambda, tag, body, options) {
        return exports.QueryLambdasApiFp(this.configuration).executeQueryLambdaByTag(workspace, queryLambda, tag, body, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve the Query Lambda version associated with a given tag.
     * @summary Retrieve Query Lambda Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.getQueryLambdaTagVersion = function (workspace, queryLambda, tag, options) {
        return exports.QueryLambdasApiFp(this.configuration).getQueryLambdaTagVersion(workspace, queryLambda, tag, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve details for a specified version of a Query Lambda.
     * @summary Retrieve Query Lambda Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.getQueryLambdaVersion = function (workspace, queryLambda, version, options) {
        return exports.QueryLambdasApiFp(this.configuration).getQueryLambdaVersion(workspace, queryLambda, version, options)(this.fetch, this.basePath);
    };
    /**
     * List all Query Lambdas in an organization.
     * @summary List Query Lambdas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.listAllQueryLambdas = function (options) {
        return exports.QueryLambdasApiFp(this.configuration).listAllQueryLambdas(options)(this.fetch, this.basePath);
    };
    /**
     * List all tags associated with a Query Lambda
     * @summary List Query Lambda Tags
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.listQueryLambdaTags = function (workspace, queryLambda, options) {
        return exports.QueryLambdasApiFp(this.configuration).listQueryLambdaTags(workspace, queryLambda, options)(this.fetch, this.basePath);
    };
    /**
     * List all versions of a Query Lambda.
     * @summary List Query Lambda Versions
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.listQueryLambdaVersions = function (workspace, queryLambda, options) {
        return exports.QueryLambdasApiFp(this.configuration).listQueryLambdaVersions(workspace, queryLambda, options)(this.fetch, this.basePath);
    };
    /**
     * List all Query Lambdas under given workspace.
     * @summary List Query Lambdas in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.listQueryLambdasInWorkspace = function (workspace, options) {
        return exports.QueryLambdasApiFp(this.configuration).listQueryLambdasInWorkspace(workspace, options)(this.fetch, this.basePath);
    };
    /**
     * Create a new version of a Query Lambda in given workspace.
     * @summary Update Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {UpdateQueryLambdaRequest} body JSON object
     * @param {boolean} [create] Create a new Query Lambda if one does not exist already.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.updateQueryLambda = function (workspace, queryLambda, body, create, options) {
        return exports.QueryLambdasApiFp(this.configuration).updateQueryLambda(workspace, queryLambda, body, create, options)(this.fetch, this.basePath);
    };
    return QueryLambdasApi;
}(BaseAPI));
exports.QueryLambdasApi = QueryLambdasApi;
/**
 * SharedLambdasApi - fetch parameter creator
 * @export
 */
exports.SharedLambdasApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Execute a public query lambda (full version).
         * @summary Execute a Public Query Lambda
         * @param {string} public_access_id public access ID of the query lambda
         * @param {ExecutePublicQueryLambdaRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executePublicQueryLambdaWithParams: function (public_access_id, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'public_access_id' is not null or undefined
            if (public_access_id === null || public_access_id === undefined) {
                throw new RequiredError('public_access_id', 'Required parameter public_access_id was null or undefined when calling executePublicQueryLambdaWithParams.');
            }
            var localVarPath = "/v1/public/shared_lambdas/{public_access_id}"
                .replace("{" + "public_access_id" + "}", encodeURIComponent(String(public_access_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ExecutePublicQueryLambdaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SharedLambdasApi - functional programming interface
 * @export
 */
exports.SharedLambdasApiFp = function (configuration) {
    return {
        /**
         * Execute a public query lambda (full version).
         * @summary Execute a Public Query Lambda
         * @param {string} public_access_id public access ID of the query lambda
         * @param {ExecutePublicQueryLambdaRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executePublicQueryLambdaWithParams: function (public_access_id, body, options) {
            var localVarFetchArgs = exports.SharedLambdasApiFetchParamCreator(configuration).executePublicQueryLambdaWithParams(public_access_id, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * SharedLambdasApi - factory interface
 * @export
 */
exports.SharedLambdasApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Execute a public query lambda (full version).
         * @summary Execute a Public Query Lambda
         * @param {string} public_access_id public access ID of the query lambda
         * @param {ExecutePublicQueryLambdaRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executePublicQueryLambdaWithParams: function (public_access_id, body, options) {
            return exports.SharedLambdasApiFp(configuration).executePublicQueryLambdaWithParams(public_access_id, body, options)(fetch, basePath);
        },
    };
};
/**
 * SharedLambdasApi - object-oriented interface
 * @export
 * @class SharedLambdasApi
 * @extends {BaseAPI}
 */
var SharedLambdasApi = /** @class */ (function (_super) {
    __extends(SharedLambdasApi, _super);
    function SharedLambdasApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Execute a public query lambda (full version).
     * @summary Execute a Public Query Lambda
     * @param {string} public_access_id public access ID of the query lambda
     * @param {ExecutePublicQueryLambdaRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedLambdasApi
     */
    SharedLambdasApi.prototype.executePublicQueryLambdaWithParams = function (public_access_id, body, options) {
        return exports.SharedLambdasApiFp(this.configuration).executePublicQueryLambdaWithParams(public_access_id, body, options)(this.fetch, this.basePath);
    };
    return SharedLambdasApi;
}(BaseAPI));
exports.SharedLambdasApi = SharedLambdasApi;
/**
 * UsersApi - fetch parameter creator
 * @export
 */
exports.UsersApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create a new user for an organization.
         * @summary Create User
         * @param {CreateUserRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createUser.');
            }
            var localVarPath = "/v1/orgs/self/users";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateUserRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user from an organization.
         * @summary Delete User
         * @param {string} user user email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (user, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling deleteUser.');
            }
            var localVarPath = "/v1/orgs/self/users/{user}"
                .replace("{" + "user" + "}", encodeURIComponent(String(user)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve currently authenticated user.
         * @summary Retrieve Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users/self";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve user by email.
         * @summary Retrieve User
         * @param {string} user user email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (user, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling getUser.');
            }
            var localVarPath = "/v1/orgs/self/users/{user}"
                .replace("{" + "user" + "}", encodeURIComponent(String(user)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all notification preferences.
         * @summary Retrieve Notification Preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnsubscribePreferences: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users/self/preferences";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all users for an organization.
         * @summary List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update notification preference.
         * @summary Update Notification Preferences
         * @param {UpdateUnsubscribePreferencesRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUnsubscribePreferences: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateUnsubscribePreferences.');
            }
            var localVarPath = "/v1/orgs/self/users/self/preferences";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateUnsubscribePreferencesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a user in an organization.
         * @summary Update User
         * @param {string} user email of the user to update
         * @param {UpdateUserRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (user, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling updateUser.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateUser.');
            }
            var localVarPath = "/v1/orgs/self/users/{user}"
                .replace("{" + "user" + "}", encodeURIComponent(String(user)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateUserRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
exports.UsersApiFp = function (configuration) {
    return {
        /**
         * Create a new user for an organization.
         * @summary Create User
         * @param {CreateUserRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (body, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).createUser(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a user from an organization.
         * @summary Delete User
         * @param {string} user user email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (user, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).deleteUser(user, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve currently authenticated user.
         * @summary Retrieve Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: function (options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).getCurrentUser(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve user by email.
         * @summary Retrieve User
         * @param {string} user user email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (user, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).getUser(user, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all notification preferences.
         * @summary Retrieve Notification Preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnsubscribePreferences: function (options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).listUnsubscribePreferences(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all users for an organization.
         * @summary List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).listUsers(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update notification preference.
         * @summary Update Notification Preferences
         * @param {UpdateUnsubscribePreferencesRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUnsubscribePreferences: function (body, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).updateUnsubscribePreferences(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a user in an organization.
         * @summary Update User
         * @param {string} user email of the user to update
         * @param {UpdateUserRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (user, body, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).updateUser(user, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
exports.UsersApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create a new user for an organization.
         * @summary Create User
         * @param {CreateUserRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (body, options) {
            return exports.UsersApiFp(configuration).createUser(body, options)(fetch, basePath);
        },
        /**
         * Delete a user from an organization.
         * @summary Delete User
         * @param {string} user user email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (user, options) {
            return exports.UsersApiFp(configuration).deleteUser(user, options)(fetch, basePath);
        },
        /**
         * Retrieve currently authenticated user.
         * @summary Retrieve Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: function (options) {
            return exports.UsersApiFp(configuration).getCurrentUser(options)(fetch, basePath);
        },
        /**
         * Retrieve user by email.
         * @summary Retrieve User
         * @param {string} user user email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (user, options) {
            return exports.UsersApiFp(configuration).getUser(user, options)(fetch, basePath);
        },
        /**
         * Get all notification preferences.
         * @summary Retrieve Notification Preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnsubscribePreferences: function (options) {
            return exports.UsersApiFp(configuration).listUnsubscribePreferences(options)(fetch, basePath);
        },
        /**
         * Retrieve all users for an organization.
         * @summary List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (options) {
            return exports.UsersApiFp(configuration).listUsers(options)(fetch, basePath);
        },
        /**
         * Update notification preference.
         * @summary Update Notification Preferences
         * @param {UpdateUnsubscribePreferencesRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUnsubscribePreferences: function (body, options) {
            return exports.UsersApiFp(configuration).updateUnsubscribePreferences(body, options)(fetch, basePath);
        },
        /**
         * Update a user in an organization.
         * @summary Update User
         * @param {string} user email of the user to update
         * @param {UpdateUserRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (user, body, options) {
            return exports.UsersApiFp(configuration).updateUser(user, body, options)(fetch, basePath);
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
var UsersApi = /** @class */ (function (_super) {
    __extends(UsersApi, _super);
    function UsersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new user for an organization.
     * @summary Create User
     * @param {CreateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.createUser = function (body, options) {
        return exports.UsersApiFp(this.configuration).createUser(body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a user from an organization.
     * @summary Delete User
     * @param {string} user user email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.deleteUser = function (user, options) {
        return exports.UsersApiFp(this.configuration).deleteUser(user, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve currently authenticated user.
     * @summary Retrieve Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getCurrentUser = function (options) {
        return exports.UsersApiFp(this.configuration).getCurrentUser(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve user by email.
     * @summary Retrieve User
     * @param {string} user user email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getUser = function (user, options) {
        return exports.UsersApiFp(this.configuration).getUser(user, options)(this.fetch, this.basePath);
    };
    /**
     * Get all notification preferences.
     * @summary Retrieve Notification Preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.listUnsubscribePreferences = function (options) {
        return exports.UsersApiFp(this.configuration).listUnsubscribePreferences(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all users for an organization.
     * @summary List Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.listUsers = function (options) {
        return exports.UsersApiFp(this.configuration).listUsers(options)(this.fetch, this.basePath);
    };
    /**
     * Update notification preference.
     * @summary Update Notification Preferences
     * @param {UpdateUnsubscribePreferencesRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.updateUnsubscribePreferences = function (body, options) {
        return exports.UsersApiFp(this.configuration).updateUnsubscribePreferences(body, options)(this.fetch, this.basePath);
    };
    /**
     * Update a user in an organization.
     * @summary Update User
     * @param {string} user email of the user to update
     * @param {UpdateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.updateUser = function (user, body, options) {
        return exports.UsersApiFp(this.configuration).updateUser(user, body, options)(this.fetch, this.basePath);
    };
    return UsersApi;
}(BaseAPI));
exports.UsersApi = UsersApi;
/**
 * ViewsApi - fetch parameter creator
 * @export
 */
exports.ViewsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create a view
         * @summary Create View
         * @param {string} workspace name of the workspace
         * @param {CreateViewRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createView: function (workspace, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling createView.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createView.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/views"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateViewRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a view
         * @summary Delete View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteView: function (workspace, view, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling deleteView.');
            }
            // verify required parameter 'view' is not null or undefined
            if (view === null || view === undefined) {
                throw new RequiredError('view', 'Required parameter view was null or undefined when calling deleteView.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/views/{view}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "view" + "}", encodeURIComponent(String(view)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details about a view
         * @summary Retrieve View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getView: function (workspace, view, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling getView.');
            }
            // verify required parameter 'view' is not null or undefined
            if (view === null || view === undefined) {
                throw new RequiredError('view', 'Required parameter view was null or undefined when calling getView.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/views/{view}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "view" + "}", encodeURIComponent(String(view)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all views in an organization
         * @summary List Views
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViews: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/views";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a view
         * @summary Update View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {UpdateViewRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateView: function (workspace, view, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling updateView.');
            }
            // verify required parameter 'view' is not null or undefined
            if (view === null || view === undefined) {
                throw new RequiredError('view', 'Required parameter view was null or undefined when calling updateView.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateView.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/views/{view}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "view" + "}", encodeURIComponent(String(view)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateViewRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all views in a workspace.
         * @summary List Views in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceViews: function (workspace, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling workspaceViews.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/views"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ViewsApi - functional programming interface
 * @export
 */
exports.ViewsApiFp = function (configuration) {
    return {
        /**
         * Create a view
         * @summary Create View
         * @param {string} workspace name of the workspace
         * @param {CreateViewRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createView: function (workspace, body, options) {
            var localVarFetchArgs = exports.ViewsApiFetchParamCreator(configuration).createView(workspace, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a view
         * @summary Delete View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteView: function (workspace, view, options) {
            var localVarFetchArgs = exports.ViewsApiFetchParamCreator(configuration).deleteView(workspace, view, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get details about a view
         * @summary Retrieve View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getView: function (workspace, view, options) {
            var localVarFetchArgs = exports.ViewsApiFetchParamCreator(configuration).getView(workspace, view, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all views in an organization
         * @summary List Views
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViews: function (options) {
            var localVarFetchArgs = exports.ViewsApiFetchParamCreator(configuration).listViews(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a view
         * @summary Update View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {UpdateViewRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateView: function (workspace, view, body, options) {
            var localVarFetchArgs = exports.ViewsApiFetchParamCreator(configuration).updateView(workspace, view, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all views in a workspace.
         * @summary List Views in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceViews: function (workspace, options) {
            var localVarFetchArgs = exports.ViewsApiFetchParamCreator(configuration).workspaceViews(workspace, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ViewsApi - factory interface
 * @export
 */
exports.ViewsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create a view
         * @summary Create View
         * @param {string} workspace name of the workspace
         * @param {CreateViewRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createView: function (workspace, body, options) {
            return exports.ViewsApiFp(configuration).createView(workspace, body, options)(fetch, basePath);
        },
        /**
         * Delete a view
         * @summary Delete View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteView: function (workspace, view, options) {
            return exports.ViewsApiFp(configuration).deleteView(workspace, view, options)(fetch, basePath);
        },
        /**
         * Get details about a view
         * @summary Retrieve View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getView: function (workspace, view, options) {
            return exports.ViewsApiFp(configuration).getView(workspace, view, options)(fetch, basePath);
        },
        /**
         * Retrieve all views in an organization
         * @summary List Views
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViews: function (options) {
            return exports.ViewsApiFp(configuration).listViews(options)(fetch, basePath);
        },
        /**
         * Update a view
         * @summary Update View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {UpdateViewRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateView: function (workspace, view, body, options) {
            return exports.ViewsApiFp(configuration).updateView(workspace, view, body, options)(fetch, basePath);
        },
        /**
         * Retrieve all views in a workspace.
         * @summary List Views in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceViews: function (workspace, options) {
            return exports.ViewsApiFp(configuration).workspaceViews(workspace, options)(fetch, basePath);
        },
    };
};
/**
 * ViewsApi - object-oriented interface
 * @export
 * @class ViewsApi
 * @extends {BaseAPI}
 */
var ViewsApi = /** @class */ (function (_super) {
    __extends(ViewsApi, _super);
    function ViewsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a view
     * @summary Create View
     * @param {string} workspace name of the workspace
     * @param {CreateViewRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    ViewsApi.prototype.createView = function (workspace, body, options) {
        return exports.ViewsApiFp(this.configuration).createView(workspace, body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a view
     * @summary Delete View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    ViewsApi.prototype.deleteView = function (workspace, view, options) {
        return exports.ViewsApiFp(this.configuration).deleteView(workspace, view, options)(this.fetch, this.basePath);
    };
    /**
     * Get details about a view
     * @summary Retrieve View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    ViewsApi.prototype.getView = function (workspace, view, options) {
        return exports.ViewsApiFp(this.configuration).getView(workspace, view, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all views in an organization
     * @summary List Views
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    ViewsApi.prototype.listViews = function (options) {
        return exports.ViewsApiFp(this.configuration).listViews(options)(this.fetch, this.basePath);
    };
    /**
     * Update a view
     * @summary Update View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {UpdateViewRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    ViewsApi.prototype.updateView = function (workspace, view, body, options) {
        return exports.ViewsApiFp(this.configuration).updateView(workspace, view, body, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all views in a workspace.
     * @summary List Views in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    ViewsApi.prototype.workspaceViews = function (workspace, options) {
        return exports.ViewsApiFp(this.configuration).workspaceViews(workspace, options)(this.fetch, this.basePath);
    };
    return ViewsApi;
}(BaseAPI));
exports.ViewsApi = ViewsApi;
/**
 * VirtualInstancesApi - fetch parameter creator
 * @export
 */
exports.VirtualInstancesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * [beta] Create virtual instance
         * @summary Create Virtual Instance
         * @param {CreateVirtualInstanceRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVirtualInstance: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createVirtualInstance.');
            }
            var localVarPath = "/v1/orgs/self/virtualinstances";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateVirtualInstanceRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [beta] Delete a virtual instance.
         * @summary Delete Virtual Instance
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVirtualInstance: function (virtualInstanceId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'virtualInstanceId' is not null or undefined
            if (virtualInstanceId === null || virtualInstanceId === undefined) {
                throw new RequiredError('virtualInstanceId', 'Required parameter virtualInstanceId was null or undefined when calling deleteVirtualInstance.');
            }
            var localVarPath = "/v1/orgs/self/virtualinstances/{virtualInstanceId}"
                .replace("{" + "virtualInstanceId" + "}", encodeURIComponent(String(virtualInstanceId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [beta] Get a mount on this virtual instance.
         * @summary Get Collection Mount
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {string} collectionPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionMount: function (virtualInstanceId, collectionPath, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'virtualInstanceId' is not null or undefined
            if (virtualInstanceId === null || virtualInstanceId === undefined) {
                throw new RequiredError('virtualInstanceId', 'Required parameter virtualInstanceId was null or undefined when calling getCollectionMount.');
            }
            // verify required parameter 'collectionPath' is not null or undefined
            if (collectionPath === null || collectionPath === undefined) {
                throw new RequiredError('collectionPath', 'Required parameter collectionPath was null or undefined when calling getCollectionMount.');
            }
            var localVarPath = "/v1/orgs/self/virtualinstances/{virtualInstanceId}/mounts/{collectionPath}"
                .replace("{" + "virtualInstanceId" + "}", encodeURIComponent(String(virtualInstanceId)))
                .replace("{" + "collectionPath" + "}", encodeURIComponent(String(collectionPath)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details about a virtual instance.
         * @summary Retrieve Virtual Instance
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualInstance: function (virtualInstanceId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'virtualInstanceId' is not null or undefined
            if (virtualInstanceId === null || virtualInstanceId === undefined) {
                throw new RequiredError('virtualInstanceId', 'Required parameter virtualInstanceId was null or undefined when calling getVirtualInstance.');
            }
            var localVarPath = "/v1/orgs/self/virtualinstances/{virtualInstanceId}"
                .replace("{" + "virtualInstanceId" + "}", encodeURIComponent(String(virtualInstanceId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [beta] Lists actively queued and running queries for a particular Virtual Instance.
         * @summary List Queries
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualInstanceQueries: function (virtualInstanceId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'virtualInstanceId' is not null or undefined
            if (virtualInstanceId === null || virtualInstanceId === undefined) {
                throw new RequiredError('virtualInstanceId', 'Required parameter virtualInstanceId was null or undefined when calling getVirtualInstanceQueries.');
            }
            var localVarPath = "/v1/orgs/self/virtualinstances/{virtualInstanceId}/queries"
                .replace("{" + "virtualInstanceId" + "}", encodeURIComponent(String(virtualInstanceId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [beta] List collection mounts for a particular VI.
         * @summary List Collection Mounts
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollectionMounts: function (virtualInstanceId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'virtualInstanceId' is not null or undefined
            if (virtualInstanceId === null || virtualInstanceId === undefined) {
                throw new RequiredError('virtualInstanceId', 'Required parameter virtualInstanceId was null or undefined when calling listCollectionMounts.');
            }
            var localVarPath = "/v1/orgs/self/virtualinstances/{virtualInstanceId}/mounts"
                .replace("{" + "virtualInstanceId" + "}", encodeURIComponent(String(virtualInstanceId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all virtual instances in an organization.
         * @summary List Virtual Instances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualInstances: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/virtualinstances";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [beta] Mount a collection to this virtual instance.
         * @summary Mount Collection
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {CreateCollectionMountRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mountCollection: function (virtualInstanceId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'virtualInstanceId' is not null or undefined
            if (virtualInstanceId === null || virtualInstanceId === undefined) {
                throw new RequiredError('virtualInstanceId', 'Required parameter virtualInstanceId was null or undefined when calling mountCollection.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling mountCollection.');
            }
            var localVarPath = "/v1/orgs/self/virtualinstances/{virtualInstanceId}/mounts"
                .replace("{" + "virtualInstanceId" + "}", encodeURIComponent(String(virtualInstanceId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateCollectionMountRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [beta] Make a SQL query to Rockset.
         * @summary Execute SQL Query
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {QueryRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVirtualInstance: function (virtualInstanceId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'virtualInstanceId' is not null or undefined
            if (virtualInstanceId === null || virtualInstanceId === undefined) {
                throw new RequiredError('virtualInstanceId', 'Required parameter virtualInstanceId was null or undefined when calling queryVirtualInstance.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling queryVirtualInstance.');
            }
            var localVarPath = "/v1/orgs/self/virtualinstances/{virtualInstanceId}/queries"
                .replace("{" + "virtualInstanceId" + "}", encodeURIComponent(String(virtualInstanceId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("QueryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [beta] Resume a virtual instance.
         * @summary Resume Virtual Instance
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeVirtualInstance: function (virtualInstanceId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'virtualInstanceId' is not null or undefined
            if (virtualInstanceId === null || virtualInstanceId === undefined) {
                throw new RequiredError('virtualInstanceId', 'Required parameter virtualInstanceId was null or undefined when calling resumeVirtualInstance.');
            }
            var localVarPath = "/v1/orgs/self/virtualinstances/{virtualInstanceId}/resume"
                .replace("{" + "virtualInstanceId" + "}", encodeURIComponent(String(virtualInstanceId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the properties of a virtual instance.
         * @summary Update Virtual Instance
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {UpdateVirtualInstanceRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVirtualInstance: function (virtualInstanceId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'virtualInstanceId' is not null or undefined
            if (virtualInstanceId === null || virtualInstanceId === undefined) {
                throw new RequiredError('virtualInstanceId', 'Required parameter virtualInstanceId was null or undefined when calling setVirtualInstance.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling setVirtualInstance.');
            }
            var localVarPath = "/v1/orgs/self/virtualinstances/{virtualInstanceId}"
                .replace("{" + "virtualInstanceId" + "}", encodeURIComponent(String(virtualInstanceId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateVirtualInstanceRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [beta] Suspend a virtual instance.
         * @summary Suspend Virtual Instance
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendVirtualInstance: function (virtualInstanceId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'virtualInstanceId' is not null or undefined
            if (virtualInstanceId === null || virtualInstanceId === undefined) {
                throw new RequiredError('virtualInstanceId', 'Required parameter virtualInstanceId was null or undefined when calling suspendVirtualInstance.');
            }
            var localVarPath = "/v1/orgs/self/virtualinstances/{virtualInstanceId}/suspend"
                .replace("{" + "virtualInstanceId" + "}", encodeURIComponent(String(virtualInstanceId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [beta] Unmount a collection from this virtual instance.
         * @summary Unmount Collection
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {string} collectionPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmountCollection: function (virtualInstanceId, collectionPath, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'virtualInstanceId' is not null or undefined
            if (virtualInstanceId === null || virtualInstanceId === undefined) {
                throw new RequiredError('virtualInstanceId', 'Required parameter virtualInstanceId was null or undefined when calling unmountCollection.');
            }
            // verify required parameter 'collectionPath' is not null or undefined
            if (collectionPath === null || collectionPath === undefined) {
                throw new RequiredError('collectionPath', 'Required parameter collectionPath was null or undefined when calling unmountCollection.');
            }
            var localVarPath = "/v1/orgs/self/virtualinstances/{virtualInstanceId}/mounts/{collectionPath}"
                .replace("{" + "virtualInstanceId" + "}", encodeURIComponent(String(virtualInstanceId)))
                .replace("{" + "collectionPath" + "}", encodeURIComponent(String(collectionPath)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * VirtualInstancesApi - functional programming interface
 * @export
 */
exports.VirtualInstancesApiFp = function (configuration) {
    return {
        /**
         * [beta] Create virtual instance
         * @summary Create Virtual Instance
         * @param {CreateVirtualInstanceRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVirtualInstance: function (body, options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).createVirtualInstance(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * [beta] Delete a virtual instance.
         * @summary Delete Virtual Instance
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVirtualInstance: function (virtualInstanceId, options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).deleteVirtualInstance(virtualInstanceId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * [beta] Get a mount on this virtual instance.
         * @summary Get Collection Mount
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {string} collectionPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionMount: function (virtualInstanceId, collectionPath, options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).getCollectionMount(virtualInstanceId, collectionPath, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get details about a virtual instance.
         * @summary Retrieve Virtual Instance
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualInstance: function (virtualInstanceId, options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).getVirtualInstance(virtualInstanceId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * [beta] Lists actively queued and running queries for a particular Virtual Instance.
         * @summary List Queries
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualInstanceQueries: function (virtualInstanceId, options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).getVirtualInstanceQueries(virtualInstanceId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * [beta] List collection mounts for a particular VI.
         * @summary List Collection Mounts
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollectionMounts: function (virtualInstanceId, options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).listCollectionMounts(virtualInstanceId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all virtual instances in an organization.
         * @summary List Virtual Instances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualInstances: function (options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).listVirtualInstances(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * [beta] Mount a collection to this virtual instance.
         * @summary Mount Collection
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {CreateCollectionMountRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mountCollection: function (virtualInstanceId, body, options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).mountCollection(virtualInstanceId, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * [beta] Make a SQL query to Rockset.
         * @summary Execute SQL Query
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {QueryRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVirtualInstance: function (virtualInstanceId, body, options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).queryVirtualInstance(virtualInstanceId, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * [beta] Resume a virtual instance.
         * @summary Resume Virtual Instance
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeVirtualInstance: function (virtualInstanceId, options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).resumeVirtualInstance(virtualInstanceId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the properties of a virtual instance.
         * @summary Update Virtual Instance
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {UpdateVirtualInstanceRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVirtualInstance: function (virtualInstanceId, body, options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).setVirtualInstance(virtualInstanceId, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * [beta] Suspend a virtual instance.
         * @summary Suspend Virtual Instance
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendVirtualInstance: function (virtualInstanceId, options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).suspendVirtualInstance(virtualInstanceId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * [beta] Unmount a collection from this virtual instance.
         * @summary Unmount Collection
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {string} collectionPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmountCollection: function (virtualInstanceId, collectionPath, options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).unmountCollection(virtualInstanceId, collectionPath, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * VirtualInstancesApi - factory interface
 * @export
 */
exports.VirtualInstancesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * [beta] Create virtual instance
         * @summary Create Virtual Instance
         * @param {CreateVirtualInstanceRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVirtualInstance: function (body, options) {
            return exports.VirtualInstancesApiFp(configuration).createVirtualInstance(body, options)(fetch, basePath);
        },
        /**
         * [beta] Delete a virtual instance.
         * @summary Delete Virtual Instance
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVirtualInstance: function (virtualInstanceId, options) {
            return exports.VirtualInstancesApiFp(configuration).deleteVirtualInstance(virtualInstanceId, options)(fetch, basePath);
        },
        /**
         * [beta] Get a mount on this virtual instance.
         * @summary Get Collection Mount
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {string} collectionPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionMount: function (virtualInstanceId, collectionPath, options) {
            return exports.VirtualInstancesApiFp(configuration).getCollectionMount(virtualInstanceId, collectionPath, options)(fetch, basePath);
        },
        /**
         * Get details about a virtual instance.
         * @summary Retrieve Virtual Instance
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualInstance: function (virtualInstanceId, options) {
            return exports.VirtualInstancesApiFp(configuration).getVirtualInstance(virtualInstanceId, options)(fetch, basePath);
        },
        /**
         * [beta] Lists actively queued and running queries for a particular Virtual Instance.
         * @summary List Queries
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualInstanceQueries: function (virtualInstanceId, options) {
            return exports.VirtualInstancesApiFp(configuration).getVirtualInstanceQueries(virtualInstanceId, options)(fetch, basePath);
        },
        /**
         * [beta] List collection mounts for a particular VI.
         * @summary List Collection Mounts
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollectionMounts: function (virtualInstanceId, options) {
            return exports.VirtualInstancesApiFp(configuration).listCollectionMounts(virtualInstanceId, options)(fetch, basePath);
        },
        /**
         * Retrieve all virtual instances in an organization.
         * @summary List Virtual Instances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualInstances: function (options) {
            return exports.VirtualInstancesApiFp(configuration).listVirtualInstances(options)(fetch, basePath);
        },
        /**
         * [beta] Mount a collection to this virtual instance.
         * @summary Mount Collection
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {CreateCollectionMountRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mountCollection: function (virtualInstanceId, body, options) {
            return exports.VirtualInstancesApiFp(configuration).mountCollection(virtualInstanceId, body, options)(fetch, basePath);
        },
        /**
         * [beta] Make a SQL query to Rockset.
         * @summary Execute SQL Query
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {QueryRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVirtualInstance: function (virtualInstanceId, body, options) {
            return exports.VirtualInstancesApiFp(configuration).queryVirtualInstance(virtualInstanceId, body, options)(fetch, basePath);
        },
        /**
         * [beta] Resume a virtual instance.
         * @summary Resume Virtual Instance
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeVirtualInstance: function (virtualInstanceId, options) {
            return exports.VirtualInstancesApiFp(configuration).resumeVirtualInstance(virtualInstanceId, options)(fetch, basePath);
        },
        /**
         * Update the properties of a virtual instance.
         * @summary Update Virtual Instance
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {UpdateVirtualInstanceRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVirtualInstance: function (virtualInstanceId, body, options) {
            return exports.VirtualInstancesApiFp(configuration).setVirtualInstance(virtualInstanceId, body, options)(fetch, basePath);
        },
        /**
         * [beta] Suspend a virtual instance.
         * @summary Suspend Virtual Instance
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendVirtualInstance: function (virtualInstanceId, options) {
            return exports.VirtualInstancesApiFp(configuration).suspendVirtualInstance(virtualInstanceId, options)(fetch, basePath);
        },
        /**
         * [beta] Unmount a collection from this virtual instance.
         * @summary Unmount Collection
         * @param {string} virtualInstanceId Virtual Instance RRN
         * @param {string} collectionPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmountCollection: function (virtualInstanceId, collectionPath, options) {
            return exports.VirtualInstancesApiFp(configuration).unmountCollection(virtualInstanceId, collectionPath, options)(fetch, basePath);
        },
    };
};
/**
 * VirtualInstancesApi - object-oriented interface
 * @export
 * @class VirtualInstancesApi
 * @extends {BaseAPI}
 */
var VirtualInstancesApi = /** @class */ (function (_super) {
    __extends(VirtualInstancesApi, _super);
    function VirtualInstancesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * [beta] Create virtual instance
     * @summary Create Virtual Instance
     * @param {CreateVirtualInstanceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.createVirtualInstance = function (body, options) {
        return exports.VirtualInstancesApiFp(this.configuration).createVirtualInstance(body, options)(this.fetch, this.basePath);
    };
    /**
     * [beta] Delete a virtual instance.
     * @summary Delete Virtual Instance
     * @param {string} virtualInstanceId Virtual Instance RRN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.deleteVirtualInstance = function (virtualInstanceId, options) {
        return exports.VirtualInstancesApiFp(this.configuration).deleteVirtualInstance(virtualInstanceId, options)(this.fetch, this.basePath);
    };
    /**
     * [beta] Get a mount on this virtual instance.
     * @summary Get Collection Mount
     * @param {string} virtualInstanceId Virtual Instance RRN
     * @param {string} collectionPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.getCollectionMount = function (virtualInstanceId, collectionPath, options) {
        return exports.VirtualInstancesApiFp(this.configuration).getCollectionMount(virtualInstanceId, collectionPath, options)(this.fetch, this.basePath);
    };
    /**
     * Get details about a virtual instance.
     * @summary Retrieve Virtual Instance
     * @param {string} virtualInstanceId Virtual Instance RRN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.getVirtualInstance = function (virtualInstanceId, options) {
        return exports.VirtualInstancesApiFp(this.configuration).getVirtualInstance(virtualInstanceId, options)(this.fetch, this.basePath);
    };
    /**
     * [beta] Lists actively queued and running queries for a particular Virtual Instance.
     * @summary List Queries
     * @param {string} virtualInstanceId Virtual Instance RRN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.getVirtualInstanceQueries = function (virtualInstanceId, options) {
        return exports.VirtualInstancesApiFp(this.configuration).getVirtualInstanceQueries(virtualInstanceId, options)(this.fetch, this.basePath);
    };
    /**
     * [beta] List collection mounts for a particular VI.
     * @summary List Collection Mounts
     * @param {string} virtualInstanceId Virtual Instance RRN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.listCollectionMounts = function (virtualInstanceId, options) {
        return exports.VirtualInstancesApiFp(this.configuration).listCollectionMounts(virtualInstanceId, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all virtual instances in an organization.
     * @summary List Virtual Instances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.listVirtualInstances = function (options) {
        return exports.VirtualInstancesApiFp(this.configuration).listVirtualInstances(options)(this.fetch, this.basePath);
    };
    /**
     * [beta] Mount a collection to this virtual instance.
     * @summary Mount Collection
     * @param {string} virtualInstanceId Virtual Instance RRN
     * @param {CreateCollectionMountRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.mountCollection = function (virtualInstanceId, body, options) {
        return exports.VirtualInstancesApiFp(this.configuration).mountCollection(virtualInstanceId, body, options)(this.fetch, this.basePath);
    };
    /**
     * [beta] Make a SQL query to Rockset.
     * @summary Execute SQL Query
     * @param {string} virtualInstanceId Virtual Instance RRN
     * @param {QueryRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.queryVirtualInstance = function (virtualInstanceId, body, options) {
        return exports.VirtualInstancesApiFp(this.configuration).queryVirtualInstance(virtualInstanceId, body, options)(this.fetch, this.basePath);
    };
    /**
     * [beta] Resume a virtual instance.
     * @summary Resume Virtual Instance
     * @param {string} virtualInstanceId Virtual Instance RRN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.resumeVirtualInstance = function (virtualInstanceId, options) {
        return exports.VirtualInstancesApiFp(this.configuration).resumeVirtualInstance(virtualInstanceId, options)(this.fetch, this.basePath);
    };
    /**
     * Update the properties of a virtual instance.
     * @summary Update Virtual Instance
     * @param {string} virtualInstanceId Virtual Instance RRN
     * @param {UpdateVirtualInstanceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.setVirtualInstance = function (virtualInstanceId, body, options) {
        return exports.VirtualInstancesApiFp(this.configuration).setVirtualInstance(virtualInstanceId, body, options)(this.fetch, this.basePath);
    };
    /**
     * [beta] Suspend a virtual instance.
     * @summary Suspend Virtual Instance
     * @param {string} virtualInstanceId Virtual Instance RRN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.suspendVirtualInstance = function (virtualInstanceId, options) {
        return exports.VirtualInstancesApiFp(this.configuration).suspendVirtualInstance(virtualInstanceId, options)(this.fetch, this.basePath);
    };
    /**
     * [beta] Unmount a collection from this virtual instance.
     * @summary Unmount Collection
     * @param {string} virtualInstanceId Virtual Instance RRN
     * @param {string} collectionPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.unmountCollection = function (virtualInstanceId, collectionPath, options) {
        return exports.VirtualInstancesApiFp(this.configuration).unmountCollection(virtualInstanceId, collectionPath, options)(this.fetch, this.basePath);
    };
    return VirtualInstancesApi;
}(BaseAPI));
exports.VirtualInstancesApi = VirtualInstancesApi;
/**
 * WorkspacesApi - fetch parameter creator
 * @export
 */
exports.WorkspacesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create a new workspace.
         * @summary Create Workspace
         * @param {CreateWorkspaceRequest} body workspace details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspace: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createWorkspace.');
            }
            var localVarPath = "/v1/orgs/self/ws";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateWorkspaceRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a workspace.
         * @summary Delete Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspace: function (workspace, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling deleteWorkspace.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a single workspace.
         * @summary Retrieve Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspace: function (workspace, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling getWorkspace.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all workspaces in an organization.
         * @summary List Workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkspaces: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/ws";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * WorkspacesApi - functional programming interface
 * @export
 */
exports.WorkspacesApiFp = function (configuration) {
    return {
        /**
         * Create a new workspace.
         * @summary Create Workspace
         * @param {CreateWorkspaceRequest} body workspace details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspace: function (body, options) {
            var localVarFetchArgs = exports.WorkspacesApiFetchParamCreator(configuration).createWorkspace(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Remove a workspace.
         * @summary Delete Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspace: function (workspace, options) {
            var localVarFetchArgs = exports.WorkspacesApiFetchParamCreator(configuration).deleteWorkspace(workspace, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get information about a single workspace.
         * @summary Retrieve Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspace: function (workspace, options) {
            var localVarFetchArgs = exports.WorkspacesApiFetchParamCreator(configuration).getWorkspace(workspace, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all workspaces in an organization.
         * @summary List Workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkspaces: function (options) {
            var localVarFetchArgs = exports.WorkspacesApiFetchParamCreator(configuration).listWorkspaces(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = fetchPonyfill.fetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * WorkspacesApi - factory interface
 * @export
 */
exports.WorkspacesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create a new workspace.
         * @summary Create Workspace
         * @param {CreateWorkspaceRequest} body workspace details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspace: function (body, options) {
            return exports.WorkspacesApiFp(configuration).createWorkspace(body, options)(fetch, basePath);
        },
        /**
         * Remove a workspace.
         * @summary Delete Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspace: function (workspace, options) {
            return exports.WorkspacesApiFp(configuration).deleteWorkspace(workspace, options)(fetch, basePath);
        },
        /**
         * Get information about a single workspace.
         * @summary Retrieve Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspace: function (workspace, options) {
            return exports.WorkspacesApiFp(configuration).getWorkspace(workspace, options)(fetch, basePath);
        },
        /**
         * List all workspaces in an organization.
         * @summary List Workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkspaces: function (options) {
            return exports.WorkspacesApiFp(configuration).listWorkspaces(options)(fetch, basePath);
        },
    };
};
/**
 * WorkspacesApi - object-oriented interface
 * @export
 * @class WorkspacesApi
 * @extends {BaseAPI}
 */
var WorkspacesApi = /** @class */ (function (_super) {
    __extends(WorkspacesApi, _super);
    function WorkspacesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new workspace.
     * @summary Create Workspace
     * @param {CreateWorkspaceRequest} body workspace details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    WorkspacesApi.prototype.createWorkspace = function (body, options) {
        return exports.WorkspacesApiFp(this.configuration).createWorkspace(body, options)(this.fetch, this.basePath);
    };
    /**
     * Remove a workspace.
     * @summary Delete Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    WorkspacesApi.prototype.deleteWorkspace = function (workspace, options) {
        return exports.WorkspacesApiFp(this.configuration).deleteWorkspace(workspace, options)(this.fetch, this.basePath);
    };
    /**
     * Get information about a single workspace.
     * @summary Retrieve Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    WorkspacesApi.prototype.getWorkspace = function (workspace, options) {
        return exports.WorkspacesApiFp(this.configuration).getWorkspace(workspace, options)(this.fetch, this.basePath);
    };
    /**
     * List all workspaces in an organization.
     * @summary List Workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    WorkspacesApi.prototype.listWorkspaces = function (options) {
        return exports.WorkspacesApiFp(this.configuration).listWorkspaces(options)(this.fetch, this.basePath);
    };
    return WorkspacesApi;
}(BaseAPI));
exports.WorkspacesApi = WorkspacesApi;
//# sourceMappingURL=api.js.map